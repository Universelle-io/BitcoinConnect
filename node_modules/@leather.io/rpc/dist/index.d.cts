import { z } from 'zod';
import { ValueOf } from '@leather.io/models';
import { IntCV, UIntCV, BufferCV, TrueCV, FalseCV, StandardPrincipalCV, ContractPrincipalCV, StringAsciiCV, StringUtf8CV, ResponseOkCV, ResponseErrorCV, NoneCV, SomeCV, ClarityType, ClarityValue } from '@stacks/transactions';

declare const rpcParameterByPositionSchema: z.ZodArray<z.ZodString, "many">;
type RpcParameterByPosition = z.infer<typeof rpcParameterByPositionSchema>;
declare const rpcParameterByNameSchema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
type RpcParameterByName = z.infer<typeof rpcParameterByNameSchema>;
declare const rpcParameterSchema: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodRecord<z.ZodString, z.ZodUnknown>, z.ZodUndefined]>;
type RpcParameter = z.infer<typeof rpcParameterSchema>;
declare const rpcBasePropsSchema: z.ZodObject<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    jsonrpc: "2.0";
}, {
    id: string;
    jsonrpc: "2.0";
}>;
type BaseRpcRequestSchema = typeof rpcBasePropsSchema;
type RpcBaseProps = z.infer<typeof rpcBasePropsSchema>;
declare function createRpcRequestSchema<TMethod extends string>(method: TMethod): BaseRpcRequestSchema & z.ZodObject<{
    method: z.ZodLiteral<TMethod>;
}>;
declare function createRpcRequestSchema<TMethod extends string, TParam extends z.ZodTypeAny>(method: TMethod, paramsSchema: TParam): BaseRpcRequestSchema & z.ZodObject<{
    method: z.ZodLiteral<TMethod>;
    params: TParam;
}>;
declare enum RpcErrorCode {
    PARSE_ERROR = -32700,
    INVALID_REQUEST = -32600,
    METHOD_NOT_FOUND = -32601,
    INVALID_PARAMS = -32602,
    INTERNAL_ERROR = -32603,
    SERVER_ERROR = -32000,
    USER_REJECTION = 4001,
    METHOD_NOT_SUPPORTED = 4002
}
declare function createRpcErrorBodySchema<TErrorData extends z.ZodTypeAny>(errorDataSchema: TErrorData): z.ZodObject<{
    code: z.ZodUnion<[z.ZodNumber, z.ZodNativeEnum<typeof RpcErrorCode>]>;
    message: z.ZodString;
    data: z.ZodOptional<TErrorData>;
}, "strip", z.ZodTypeAny, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    code: z.ZodUnion<[z.ZodNumber, z.ZodNativeEnum<typeof RpcErrorCode>]>;
    message: z.ZodString;
    data: z.ZodOptional<TErrorData>;
}>, any> extends infer T ? { [k in keyof T]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    code: z.ZodUnion<[z.ZodNumber, z.ZodNativeEnum<typeof RpcErrorCode>]>;
    message: z.ZodString;
    data: z.ZodOptional<TErrorData>;
}>, any>[k]; } : never, z.baseObjectInputType<{
    code: z.ZodUnion<[z.ZodNumber, z.ZodNativeEnum<typeof RpcErrorCode>]>;
    message: z.ZodString;
    data: z.ZodOptional<TErrorData>;
}> extends infer T_1 ? { [k_1 in keyof T_1]: z.baseObjectInputType<{
    code: z.ZodUnion<[z.ZodNumber, z.ZodNativeEnum<typeof RpcErrorCode>]>;
    message: z.ZodString;
    data: z.ZodOptional<TErrorData>;
}>[k_1]; } : never>;
type RpcErrorBodySchema<TErrorData extends RpcParameter = RpcParameter> = ReturnType<typeof createRpcErrorBodySchema<z.ZodType<TErrorData>>>;
type RpcErrorBody<TErrorData extends RpcParameter = RpcParameter> = z.infer<RpcErrorBodySchema<TErrorData>>;
declare function createRpcErrorResponseSchema<TError extends z.ZodType<RpcErrorBody> = z.ZodType<RpcErrorBody>>(errorSchema: TError): z.ZodObject<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>, "strip", z.ZodTypeAny, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>>, any> extends infer T ? { [k in keyof T]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>>, any>[k]; } : never, z.baseObjectInputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>> extends infer T_1 ? { [k_1 in keyof T_1]: z.baseObjectInputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>>[k_1]; } : never>;
declare const defaultErrorSchema: z.ZodObject<{
    code: z.ZodUnion<[z.ZodNumber, z.ZodNativeEnum<typeof RpcErrorCode>]>;
    message: z.ZodString;
    data: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    code: number;
    message: string;
    data?: any;
}, {
    code: number;
    message: string;
    data?: any;
}>;
type RpcErrorResponseSchema<TError extends RpcErrorBody = RpcErrorBody> = ReturnType<typeof createRpcErrorResponseSchema<z.ZodType<TError>>>;
type RpcErrorResponse<TError extends RpcErrorBody = RpcErrorBody> = z.infer<RpcErrorResponseSchema<TError>>;
declare function createRpcSuccessResponseSchema<TResult extends z.ZodType<object>>(resultSchema: TResult): z.ZodObject<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>, "strip", z.ZodTypeAny, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>>, any> extends infer T ? { [k in keyof T]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>>, any>[k]; } : never, z.baseObjectInputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>> extends infer T_1 ? { [k_1 in keyof T_1]: z.baseObjectInputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>>[k_1]; } : never>;
type RpcSuccessResponseSchema<TResult extends object> = ReturnType<typeof createRpcSuccessResponseSchema<z.ZodType<TResult>>>;
type RpcSuccessResponse<TResult extends object> = z.infer<RpcSuccessResponseSchema<TResult>>;
declare function createRpcResponseSchema<TResult extends z.ZodType<object>, TError extends z.ZodType<RpcErrorBody>>(resultSchema: TResult, errorSchema: TError): z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>, "strip", z.ZodTypeAny, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>>, any> extends infer T ? { [k in keyof T]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>>, any>[k]; } : never, z.baseObjectInputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>> extends infer T_1 ? { [k_1 in keyof T_1]: z.baseObjectInputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    result: TResult;
}>>[k_1]; } : never>, z.ZodObject<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>, "strip", z.ZodTypeAny, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>>, any> extends infer T_2 ? { [k_2 in keyof T_2]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>>, any>[k_2]; } : never, z.baseObjectInputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>> extends infer T_3 ? { [k_3 in keyof T_3]: z.baseObjectInputType<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodString;
}, {
    error: TError;
}>>[k_3]; } : never>]>;
type ExtractSuccessResponse<T> = Extract<T, {
    result: any;
}>;
type ExtractErrorResponse<T> = Extract<T, {
    error: any;
}>;
type RpcRequest<T extends {
    request: z.ZodType;
}> = z.infer<T['request']>;
type RpcParams<T extends {
    params: z.ZodType;
}> = z.infer<T['params']>;
type RpcResponse<T extends {
    response: z.ZodType;
}> = z.infer<T['response']>;
type RpcResult<T extends {
    result: z.ZodType;
}> = z.infer<T['result']>;
declare function defineRpcEndpoint<Method extends string, Result extends z.ZodTypeAny, Error extends z.ZodType<RpcErrorBody>>(props: {
    method: Method;
    result: Result;
    error?: Error;
}): {
    method: Method;
    result: Result;
    error: Error;
    request: ReturnType<typeof createRpcRequestSchema<Method>>;
    response: ReturnType<typeof createRpcResponseSchema<Result, Error>>;
};
declare function defineRpcEndpoint<Method extends string, Result extends z.ZodTypeAny, Error extends z.ZodType<RpcErrorBody>, Params extends z.ZodTypeAny>(props: {
    method: Method;
    params: Params;
    result: Result;
    error?: Error;
}): {
    method: Method;
    params: Params;
    result: Result;
    error: Error;
    request: ReturnType<typeof createRpcRequestSchema<Method, Params>>;
    response: ReturnType<typeof createRpcResponseSchema<Result, Error>>;
};

declare function testIsNumberOrArrayOfNumbers(value: unknown): boolean;
declare function encodeBase64Json(payload: Record<any, unknown>): string;
declare function decodeBase64Json(encodedPayload: string): unknown;
declare function createRequestEncoder<T extends z.ZodTypeAny>(schema: T): {
    encode: (request: z.infer<T>) => string;
    decode: (encodedRequest: string) => z.infer<T>;
};

declare const getInfo: {
    method: "getInfo";
    result: z.ZodObject<{
        version: z.ZodString;
        supportedMethods: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        version: string;
        supportedMethods?: string[] | undefined;
    }, {
        version: string;
        supportedMethods?: string[] | undefined;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"getInfo">;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        method: "getInfo";
    }, {
        method: "getInfo";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            version: z.ZodString;
            supportedMethods: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            version: string;
            supportedMethods?: string[] | undefined;
        }, {
            version: string;
            supportedMethods?: string[] | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            version: string;
            supportedMethods?: string[] | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            version: string;
            supportedMethods?: string[] | undefined;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

/**
 * DEFAULT       -- all inputs, all outputs
 * ALL           -- all inputs, all outputs
 * NONE          -- all inputs, no outputs
 * SINGLE        -- all inputs, one output of the same index
 * ALL + ANYONE  -- one input, all outputs
 * NONE + ANYONE -- one input, no outputs
 * SINGLE        -- one inputs, one output of the same index
 */
declare const signatureHash: {
    readonly DEFAULT: 0;
    readonly ALL: 1;
    readonly NONE: 2;
    readonly SINGLE: 3;
    readonly ALL_ANYONECANPAY: 129;
    readonly NONE_ANYONECANPAY: 130;
    readonly SINGLE_ANYONECANPAY: 131;
};
declare const signPsbt: {
    method: "signPsbt";
    params: z.ZodObject<{
        account: z.ZodOptional<z.ZodNumber>;
        allowedSighash: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
        broadcast: z.ZodOptional<z.ZodBoolean>;
        hex: z.ZodString;
        network: z.ZodOptional<z.ZodString>;
        signAtIndex: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>, number | number[] | undefined, number | number[] | undefined>;
    }, "strip", z.ZodTypeAny, {
        hex: string;
        network?: string | undefined;
        account?: number | undefined;
        allowedSighash?: any[] | undefined;
        broadcast?: boolean | undefined;
        signAtIndex?: number | number[] | undefined;
    }, {
        hex: string;
        network?: string | undefined;
        account?: number | undefined;
        allowedSighash?: any[] | undefined;
        broadcast?: boolean | undefined;
        signAtIndex?: number | number[] | undefined;
    }>;
    result: z.ZodObject<{
        hex: z.ZodString;
        txid: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        hex: string;
        txid?: string | undefined;
    }, {
        hex: string;
        txid?: string | undefined;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"signPsbt">;
        params: z.ZodObject<{
            account: z.ZodOptional<z.ZodNumber>;
            allowedSighash: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
            broadcast: z.ZodOptional<z.ZodBoolean>;
            hex: z.ZodString;
            network: z.ZodOptional<z.ZodString>;
            signAtIndex: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>, number | number[] | undefined, number | number[] | undefined>;
        }, "strip", z.ZodTypeAny, {
            hex: string;
            network?: string | undefined;
            account?: number | undefined;
            allowedSighash?: any[] | undefined;
            broadcast?: boolean | undefined;
            signAtIndex?: number | number[] | undefined;
        }, {
            hex: string;
            network?: string | undefined;
            account?: number | undefined;
            allowedSighash?: any[] | undefined;
            broadcast?: boolean | undefined;
            signAtIndex?: number | number[] | undefined;
        }>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            hex: string;
            network?: string | undefined;
            account?: number | undefined;
            allowedSighash?: any[] | undefined;
            broadcast?: boolean | undefined;
            signAtIndex?: number | number[] | undefined;
        };
        method: "signPsbt";
    }, {
        params: {
            hex: string;
            network?: string | undefined;
            account?: number | undefined;
            allowedSighash?: any[] | undefined;
            broadcast?: boolean | undefined;
            signAtIndex?: number | number[] | undefined;
        };
        method: "signPsbt";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            hex: z.ZodString;
            txid: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            hex: string;
            txid?: string | undefined;
        }, {
            hex: string;
            txid?: string | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            hex: string;
            txid?: string | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            hex: string;
            txid?: string | undefined;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const bitcoinPaymentTypesSchema: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
type BitcoinPaymentTypes = z.infer<typeof bitcoinPaymentTypesSchema>;
/** @deprecated use `BitcoinPaymentTypes` */
type PaymentTypes = BitcoinPaymentTypes;
declare const btcAddressBaseSchema: z.ZodObject<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, "strip", z.ZodTypeAny, {
    symbol: "BTC";
    type: "p2pkh" | "p2sh" | "p2wpkh-p2sh" | "p2wpkh" | "p2tr";
    address: string;
    publicKey: string;
    derivationPath: string;
}, {
    symbol: "BTC";
    type: "p2pkh" | "p2sh" | "p2wpkh-p2sh" | "p2wpkh" | "p2tr";
    address: string;
    publicKey: string;
    derivationPath: string;
}>;
type BtcAddressBase = z.infer<typeof btcAddressBaseSchema>;
declare const nativeSegwitAddressSchema: z.ZodObject<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2wpkh">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2wpkh">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2wpkh">;
}>, z.ZodTypeAny, "passthrough">>;
type NativeSegwitAddress = z.infer<typeof nativeSegwitAddressSchema>;
declare const taprootAddressSchema: z.ZodObject<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2tr">;
    tweakedPublicKey: z.ZodString;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2tr">;
    tweakedPublicKey: z.ZodString;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2tr">;
    tweakedPublicKey: z.ZodString;
}>, z.ZodTypeAny, "passthrough">>;
type TaprootAddress = z.infer<typeof taprootAddressSchema>;
declare const btcAddressSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2wpkh">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2wpkh">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2wpkh">;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2tr">;
    tweakedPublicKey: z.ZodString;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2tr">;
    tweakedPublicKey: z.ZodString;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2tr">;
    tweakedPublicKey: z.ZodString;
}>, z.ZodTypeAny, "passthrough">>]>;
type BtcAddress = z.infer<typeof btcAddressSchema>;
declare const stxAddressSchema: z.ZodObject<{
    symbol: z.ZodLiteral<"STX">;
    address: z.ZodString;
    publicKey: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    symbol: z.ZodLiteral<"STX">;
    address: z.ZodString;
    publicKey: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    symbol: z.ZodLiteral<"STX">;
    address: z.ZodString;
    publicKey: z.ZodString;
}, z.ZodTypeAny, "passthrough">>;
type StxAddress = z.infer<typeof stxAddressSchema>;
declare const addressSchema: z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2wpkh">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2wpkh">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2wpkh">;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2tr">;
    tweakedPublicKey: z.ZodString;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2tr">;
    tweakedPublicKey: z.ZodString;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    symbol: z.ZodLiteral<"BTC">;
    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, {
    type: z.ZodLiteral<"p2tr">;
    tweakedPublicKey: z.ZodString;
}>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
    symbol: z.ZodLiteral<"STX">;
    address: z.ZodString;
    publicKey: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    symbol: z.ZodLiteral<"STX">;
    address: z.ZodString;
    publicKey: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    symbol: z.ZodLiteral<"STX">;
    address: z.ZodString;
    publicKey: z.ZodString;
}, z.ZodTypeAny, "passthrough">>]>;
type Address = z.infer<typeof addressSchema>;
declare const addressResponseBodySchema: z.ZodObject<{
    addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2wpkh">;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2wpkh">;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2wpkh">;
    }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2tr">;
        tweakedPublicKey: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2tr">;
        tweakedPublicKey: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2tr">;
        tweakedPublicKey: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
        symbol: z.ZodLiteral<"STX">;
        address: z.ZodString;
        publicKey: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        symbol: z.ZodLiteral<"STX">;
        address: z.ZodString;
        publicKey: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        symbol: z.ZodLiteral<"STX">;
        address: z.ZodString;
        publicKey: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2wpkh">;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2wpkh">;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2wpkh">;
    }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2tr">;
        tweakedPublicKey: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2tr">;
        tweakedPublicKey: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2tr">;
        tweakedPublicKey: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
        symbol: z.ZodLiteral<"STX">;
        address: z.ZodString;
        publicKey: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        symbol: z.ZodLiteral<"STX">;
        address: z.ZodString;
        publicKey: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        symbol: z.ZodLiteral<"STX">;
        address: z.ZodString;
        publicKey: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2wpkh">;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2wpkh">;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2wpkh">;
    }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2tr">;
        tweakedPublicKey: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2tr">;
        tweakedPublicKey: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        symbol: z.ZodLiteral<"BTC">;
        type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, {
        type: z.ZodLiteral<"p2tr">;
        tweakedPublicKey: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
        symbol: z.ZodLiteral<"STX">;
        address: z.ZodString;
        publicKey: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        symbol: z.ZodLiteral<"STX">;
        address: z.ZodString;
        publicKey: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        symbol: z.ZodLiteral<"STX">;
        address: z.ZodString;
        publicKey: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
}, z.ZodTypeAny, "passthrough">>;
declare const getAddresses: {
    method: "getAddresses";
    params: z.ZodOptional<z.ZodObject<{
        network: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        network?: string | undefined;
    }, {
        network?: string | undefined;
    }>>;
    result: z.ZodObject<{
        addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2wpkh">;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2wpkh">;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2wpkh">;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2tr">;
            tweakedPublicKey: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2tr">;
            tweakedPublicKey: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2tr">;
            tweakedPublicKey: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
            symbol: z.ZodLiteral<"STX">;
            address: z.ZodString;
            publicKey: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            symbol: z.ZodLiteral<"STX">;
            address: z.ZodString;
            publicKey: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            symbol: z.ZodLiteral<"STX">;
            address: z.ZodString;
            publicKey: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2wpkh">;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2wpkh">;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2wpkh">;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2tr">;
            tweakedPublicKey: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2tr">;
            tweakedPublicKey: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2tr">;
            tweakedPublicKey: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
            symbol: z.ZodLiteral<"STX">;
            address: z.ZodString;
            publicKey: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            symbol: z.ZodLiteral<"STX">;
            address: z.ZodString;
            publicKey: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            symbol: z.ZodLiteral<"STX">;
            address: z.ZodString;
            publicKey: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2wpkh">;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2wpkh">;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2wpkh">;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2tr">;
            tweakedPublicKey: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2tr">;
            tweakedPublicKey: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            symbol: z.ZodLiteral<"BTC">;
            type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, {
            type: z.ZodLiteral<"p2tr">;
            tweakedPublicKey: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
            symbol: z.ZodLiteral<"STX">;
            address: z.ZodString;
            publicKey: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            symbol: z.ZodLiteral<"STX">;
            address: z.ZodString;
            publicKey: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            symbol: z.ZodLiteral<"STX">;
            address: z.ZodString;
            publicKey: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>, "many">;
    }, z.ZodTypeAny, "passthrough">>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"getAddresses">;
        params: z.ZodOptional<z.ZodObject<{
            network: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
        }, {
            network?: string | undefined;
        }>>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        method: "getAddresses";
        params?: {
            network?: string | undefined;
        } | undefined;
    }, {
        method: "getAddresses";
        params?: {
            network?: string | undefined;
        } | undefined;
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>, "many">;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>, "many">;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>, "many">;
        }, z.ZodTypeAny, "passthrough">>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            addresses: (z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough"> | z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">)[];
        } & {
            [k: string]: unknown;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            addresses: (z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough"> | z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">)[];
        } & {
            [k: string]: unknown;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const sendTransferLegacyParamSchema: z.ZodObject<{
    account: z.ZodOptional<z.ZodNumber>;
    address: z.ZodString;
    amount: z.ZodString;
    network: z.ZodString;
}, "strip", z.ZodTypeAny, {
    network: string;
    address: string;
    amount: string;
    account?: number | undefined;
}, {
    network: string;
    address: string;
    amount: string;
    account?: number | undefined;
}>;
type RpcSendTransferLegacyParams = z.infer<typeof sendTransferLegacyParamSchema>;
declare const rpcSendTransferParamsSchema: z.ZodObject<{
    account: z.ZodOptional<z.ZodNumber>;
    recipients: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        amount: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        address: string;
        amount: string;
    }, {
        address: string;
        amount: string;
    }>, "many">;
    network: z.ZodString;
}, "strip", z.ZodTypeAny, {
    network: string;
    recipients: {
        address: string;
        amount: string;
    }[];
    account?: number | undefined;
}, {
    network: string;
    recipients: {
        address: string;
        amount: string;
    }[];
    account?: number | undefined;
}>;
type RpcSendTransferParams = z.infer<typeof rpcSendTransferParamsSchema>;
declare const sendTransfer: {
    method: "sendTransfer";
    params: z.ZodUnion<[z.ZodObject<{
        account: z.ZodOptional<z.ZodNumber>;
        address: z.ZodString;
        amount: z.ZodString;
        network: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        network: string;
        address: string;
        amount: string;
        account?: number | undefined;
    }, {
        network: string;
        address: string;
        amount: string;
        account?: number | undefined;
    }>, z.ZodObject<{
        account: z.ZodOptional<z.ZodNumber>;
        recipients: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            amount: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            address: string;
            amount: string;
        }, {
            address: string;
            amount: string;
        }>, "many">;
        network: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        network: string;
        recipients: {
            address: string;
            amount: string;
        }[];
        account?: number | undefined;
    }, {
        network: string;
        recipients: {
            address: string;
            amount: string;
        }[];
        account?: number | undefined;
    }>]>;
    result: z.ZodObject<{
        txid: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        txid: string;
    }, {
        txid: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"sendTransfer">;
        params: z.ZodUnion<[z.ZodObject<{
            account: z.ZodOptional<z.ZodNumber>;
            address: z.ZodString;
            amount: z.ZodString;
            network: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            network: string;
            address: string;
            amount: string;
            account?: number | undefined;
        }, {
            network: string;
            address: string;
            amount: string;
            account?: number | undefined;
        }>, z.ZodObject<{
            account: z.ZodOptional<z.ZodNumber>;
            recipients: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                amount: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                address: string;
                amount: string;
            }, {
                address: string;
                amount: string;
            }>, "many">;
            network: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            network: string;
            recipients: {
                address: string;
                amount: string;
            }[];
            account?: number | undefined;
        }, {
            network: string;
            recipients: {
                address: string;
                amount: string;
            }[];
            account?: number | undefined;
        }>]>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            network: string;
            address: string;
            amount: string;
            account?: number | undefined;
        } | {
            network: string;
            recipients: {
                address: string;
                amount: string;
            }[];
            account?: number | undefined;
        };
        method: "sendTransfer";
    }, {
        params: {
            network: string;
            address: string;
            amount: string;
            account?: number | undefined;
        } | {
            network: string;
            recipients: {
                address: string;
                amount: string;
            }[];
            account?: number | undefined;
        };
        method: "sendTransfer";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            txid: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
        }, {
            txid: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            txid: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            txid: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const Bip322MessageTypesSchema: z.ZodEnum<["legacy", "bip322"]>;
type Bip322MessageTypes = z.infer<typeof Bip322MessageTypesSchema>;
declare const signMessageRequestParamsSchema: z.ZodObject<{
    type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
    account: z.ZodOptional<z.ZodNumber>;
    message: z.ZodString;
    paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
    account: z.ZodOptional<z.ZodNumber>;
    message: z.ZodString;
    paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
    account: z.ZodOptional<z.ZodNumber>;
    message: z.ZodString;
    paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
}, z.ZodTypeAny, "passthrough">>;
declare const signMessage: {
    method: "signMessage";
    params: z.ZodObject<{
        type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
        account: z.ZodOptional<z.ZodNumber>;
        message: z.ZodString;
        paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
        account: z.ZodOptional<z.ZodNumber>;
        message: z.ZodString;
        paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
        account: z.ZodOptional<z.ZodNumber>;
        message: z.ZodString;
        paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
    }, z.ZodTypeAny, "passthrough">>;
    result: z.ZodObject<{
        signature: z.ZodString;
        address: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        signature: z.ZodString;
        address: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        signature: z.ZodString;
        address: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"signMessage">;
        params: z.ZodObject<{
            type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
            account: z.ZodOptional<z.ZodNumber>;
            message: z.ZodString;
            paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
            account: z.ZodOptional<z.ZodNumber>;
            message: z.ZodString;
            paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
            account: z.ZodOptional<z.ZodNumber>;
            message: z.ZodString;
            paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
        }, z.ZodTypeAny, "passthrough">>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            message: string;
            paymentType: "p2wpkh" | "p2tr";
            type?: "legacy" | "bip322" | undefined;
            account?: number | undefined;
        } & {
            [k: string]: unknown;
        };
        method: "signMessage";
    }, {
        params: {
            message: string;
            paymentType: "p2wpkh" | "p2tr";
            type?: "legacy" | "bip322" | undefined;
            account?: number | undefined;
        } & {
            [k: string]: unknown;
        };
        method: "signMessage";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            signature: z.ZodString;
            address: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            signature: z.ZodString;
            address: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            signature: z.ZodString;
            address: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            address: string;
            signature: string;
        } & {
            [k: string]: unknown;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            address: string;
            signature: string;
        } & {
            [k: string]: unknown;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const cvIntSchema: z.ZodType<IntCV>;
declare const cvUintSchema: z.ZodType<UIntCV>;
declare const cvBufferSchema: z.ZodType<BufferCV>;
declare const cvTrueSchema: z.ZodType<TrueCV>;
declare const cvFalseSchema: z.ZodType<FalseCV>;
declare const cvAddressSchema: z.ZodType<StandardPrincipalCV>;
declare const cvContractSchema: z.ZodType<ContractPrincipalCV>;
declare const cvAsciiSchema: z.ZodType<StringAsciiCV>;
declare const cvUtf8Schema: z.ZodType<StringUtf8CV>;
declare const cvOkSchema: z.ZodType<ResponseOkCV>;
declare const cvErrSchema: z.ZodType<ResponseErrorCV>;
declare const cvNoneSchema: z.ZodType<NoneCV>;
declare const cvSomeSchema: z.ZodType<SomeCV>;
declare const cvListSchema: z.ZodObject<{
    type: z.ZodLiteral<ClarityType.List>;
    value: z.ZodArray<z.ZodLazy<z.ZodType<ClarityValue, z.ZodTypeDef, ClarityValue>>, "many">;
}, "strip", z.ZodTypeAny, {
    value: ClarityValue[];
    type: ClarityType.List;
}, {
    value: ClarityValue[];
    type: ClarityType.List;
}>;
declare const cvTupleSchema: z.ZodObject<{
    type: z.ZodLiteral<ClarityType.Tuple>;
    value: z.ZodRecord<z.ZodString, z.ZodLazy<z.ZodType<ClarityValue, z.ZodTypeDef, ClarityValue>>>;
}, "strip", z.ZodTypeAny, {
    value: Record<string, ClarityValue>;
    type: ClarityType.Tuple;
}, {
    value: Record<string, ClarityValue>;
    type: ClarityType.Tuple;
}>;
declare const clarityValueSchema: z.ZodType<ClarityValue>;

declare const stacksTransactionDetailsSchema: z.ZodObject<{
    txid: z.ZodString;
    transaction: z.ZodString;
}, "strip", z.ZodTypeAny, {
    txid: string;
    transaction: string;
}, {
    txid: string;
    transaction: string;
}>;
declare const baseStacksTransactionConfigSchema: z.ZodObject<{
    address: z.ZodOptional<z.ZodString>;
    network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
    fee: z.ZodOptional<z.ZodNumber>;
    nonce: z.ZodOptional<z.ZodNumber>;
    postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
    sponsored: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    network?: string | undefined;
    address?: string | undefined;
    fee?: number | undefined;
    nonce?: number | undefined;
    postConditions?: string[] | undefined;
    postConditionMode?: "allow" | "deny" | undefined;
    sponsored?: boolean | undefined;
}, {
    network?: string | undefined;
    address?: string | undefined;
    fee?: number | undefined;
    nonce?: number | undefined;
    postConditions?: string[] | undefined;
    postConditionMode?: "allow" | "deny" | undefined;
    sponsored?: boolean | undefined;
}>;

declare const stxSignMessageTypeSchema: z.ZodEnum<["utf8", "structured"]>;
type StxSignMessageTypes = z.infer<typeof stxSignMessageTypeSchema>;
declare const stxSignMessageRequestBaseSchema: z.ZodObject<{
    messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
    network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
}, "strip", z.ZodTypeAny, {
    messageType: "utf8" | "structured";
    network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
}, {
    network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
    messageType?: "utf8" | "structured" | undefined;
}>;
type StxSignMessageRequestParamsBase = z.infer<typeof stxSignMessageRequestBaseSchema>;
declare const stxSignMessageRequestUtf8Schema: z.ZodObject<z.objectUtil.extendShape<{
    messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
    network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
}, {
    messageType: z.ZodDefault<z.ZodLiteral<"utf8">>;
    message: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    messageType: "utf8";
    network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
}, {
    message: string;
    network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
    messageType?: "utf8" | undefined;
}>;
type StxSignMessageRequestParamsUtf8 = z.infer<typeof stxSignMessageRequestUtf8Schema>;
declare const stxSignMessageRequestStructuredSchema: z.ZodObject<z.objectUtil.extendShape<{
    messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
    network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
}, {
    messageType: z.ZodLiteral<"structured">;
    domain: z.ZodString;
    message: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    message: string;
    messageType: "structured";
    domain: string;
    network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
}, {
    message: string;
    messageType: "structured";
    domain: string;
    network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
}>;
type StxSignMessageRequestParamsStructured = z.infer<typeof stxSignMessageRequestStructuredSchema>;
declare const stxSignMessage: {
    method: "stx_signMessage";
    params: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
        network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
    }, {
        messageType: z.ZodDefault<z.ZodLiteral<"utf8">>;
        message: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        messageType: "utf8";
        network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
    }, {
        message: string;
        network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        messageType?: "utf8" | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
        network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
    }, {
        messageType: z.ZodLiteral<"structured">;
        domain: z.ZodString;
        message: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        message: string;
        messageType: "structured";
        domain: string;
        network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
    }, {
        message: string;
        messageType: "structured";
        domain: string;
        network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
    }>]>;
    result: z.ZodObject<{
        signature: z.ZodString;
        publicKey: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
    }, {
        publicKey: string;
        signature: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_signMessage">;
        params: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
            network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
        }, {
            messageType: z.ZodDefault<z.ZodLiteral<"utf8">>;
            message: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            message: string;
            messageType: "utf8";
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        }, {
            message: string;
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
            messageType?: "utf8" | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
            network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
        }, {
            messageType: z.ZodLiteral<"structured">;
            domain: z.ZodString;
            message: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            message: string;
            messageType: "structured";
            domain: string;
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        }, {
            message: string;
            messageType: "structured";
            domain: string;
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        }>]>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            message: string;
            messageType: "utf8";
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        } | {
            message: string;
            messageType: "structured";
            domain: string;
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        };
        method: "stx_signMessage";
    }, {
        params: {
            message: string;
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
            messageType?: "utf8" | undefined;
        } | {
            message: string;
            messageType: "structured";
            domain: string;
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        };
        method: "stx_signMessage";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            signature: z.ZodString;
            publicKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
        }, {
            publicKey: string;
            signature: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            publicKey: string;
            signature: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            publicKey: string;
            signature: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const stxSignStructuredMessage: {
    method: "stx_signStructuredMessage";
    params: z.ZodObject<{
        domain: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        domain: string;
    }, {
        message: string;
        domain: string;
    }>;
    result: z.ZodObject<{
        signature: z.ZodString;
        publicKey: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
    }, {
        publicKey: string;
        signature: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_signStructuredMessage">;
        params: z.ZodObject<{
            domain: z.ZodString;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            domain: string;
        }, {
            message: string;
            domain: string;
        }>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            message: string;
            domain: string;
        };
        method: "stx_signStructuredMessage";
    }, {
        params: {
            message: string;
            domain: string;
        };
        method: "stx_signStructuredMessage";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            signature: z.ZodString;
            publicKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
        }, {
            publicKey: string;
            signature: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            publicKey: string;
            signature: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            publicKey: string;
            signature: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const stxSignTransactionRequestLeatherRpcParamsSchema: z.ZodObject<{
    txHex: z.ZodString;
    stxAddress: z.ZodOptional<z.ZodString>;
    attachment: z.ZodOptional<z.ZodString>;
    accountIndex: z.ZodOptional<z.ZodString>;
    network: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    txHex: string;
    network?: string | undefined;
    stxAddress?: string | undefined;
    attachment?: string | undefined;
    accountIndex?: string | undefined;
}, {
    txHex: string;
    network?: string | undefined;
    stxAddress?: string | undefined;
    attachment?: string | undefined;
    accountIndex?: string | undefined;
}>;
declare const stxSignTransactionRequestSip30ParamsSchema: z.ZodObject<{
    transaction: z.ZodString;
    network: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    transaction: string;
    network?: string | undefined;
}, {
    transaction: string;
    network?: string | undefined;
}>;
declare const stxSignTransaction: {
    method: "stx_signTransaction";
    params: z.ZodUnion<[z.ZodObject<{
        txHex: z.ZodString;
        stxAddress: z.ZodOptional<z.ZodString>;
        attachment: z.ZodOptional<z.ZodString>;
        accountIndex: z.ZodOptional<z.ZodString>;
        network: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        txHex: string;
        network?: string | undefined;
        stxAddress?: string | undefined;
        attachment?: string | undefined;
        accountIndex?: string | undefined;
    }, {
        txHex: string;
        network?: string | undefined;
        stxAddress?: string | undefined;
        attachment?: string | undefined;
        accountIndex?: string | undefined;
    }>, z.ZodObject<{
        transaction: z.ZodString;
        network: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        transaction: string;
        network?: string | undefined;
    }, {
        transaction: string;
        network?: string | undefined;
    }>]>;
    result: z.ZodObject<{
        transaction: z.ZodString;
        txHex: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transaction: string;
        txHex: string;
    }, {
        transaction: string;
        txHex: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_signTransaction">;
        params: z.ZodUnion<[z.ZodObject<{
            txHex: z.ZodString;
            stxAddress: z.ZodOptional<z.ZodString>;
            attachment: z.ZodOptional<z.ZodString>;
            accountIndex: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            txHex: string;
            network?: string | undefined;
            stxAddress?: string | undefined;
            attachment?: string | undefined;
            accountIndex?: string | undefined;
        }, {
            txHex: string;
            network?: string | undefined;
            stxAddress?: string | undefined;
            attachment?: string | undefined;
            accountIndex?: string | undefined;
        }>, z.ZodObject<{
            transaction: z.ZodString;
            network: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            transaction: string;
            network?: string | undefined;
        }, {
            transaction: string;
            network?: string | undefined;
        }>]>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            txHex: string;
            network?: string | undefined;
            stxAddress?: string | undefined;
            attachment?: string | undefined;
            accountIndex?: string | undefined;
        } | {
            transaction: string;
            network?: string | undefined;
        };
        method: "stx_signTransaction";
    }, {
        params: {
            txHex: string;
            network?: string | undefined;
            stxAddress?: string | undefined;
            attachment?: string | undefined;
            accountIndex?: string | undefined;
        } | {
            transaction: string;
            network?: string | undefined;
        };
        method: "stx_signTransaction";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            transaction: z.ZodString;
            txHex: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            transaction: string;
            txHex: string;
        }, {
            transaction: string;
            txHex: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            transaction: string;
            txHex: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            transaction: string;
            txHex: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const stxCallContract: {
    method: "stx_callContract";
    params: z.ZodIntersection<z.ZodObject<{
        contract: z.ZodString;
        functionName: z.ZodString;
        functionArgs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        contract: string;
        functionName: string;
        functionArgs?: string[] | undefined;
    }, {
        contract: string;
        functionName: string;
        functionArgs?: string[] | undefined;
    }>, z.ZodObject<{
        address: z.ZodOptional<z.ZodString>;
        network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
        fee: z.ZodOptional<z.ZodNumber>;
        nonce: z.ZodOptional<z.ZodNumber>;
        postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
        sponsored: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }>>;
    result: z.ZodObject<{
        txid: z.ZodString;
        transaction: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        txid: string;
        transaction: string;
    }, {
        txid: string;
        transaction: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_callContract">;
        params: z.ZodIntersection<z.ZodObject<{
            contract: z.ZodString;
            functionName: z.ZodString;
            functionArgs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            contract: string;
            functionName: string;
            functionArgs?: string[] | undefined;
        }, {
            contract: string;
            functionName: string;
            functionArgs?: string[] | undefined;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            contract: string;
            functionName: string;
            functionArgs?: string[] | undefined;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_callContract";
    }, {
        params: {
            contract: string;
            functionName: string;
            functionArgs?: string[] | undefined;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_callContract";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const stxDeployContractResponseBodySchema: z.ZodObject<{
    txid: z.ZodString;
    transaction: z.ZodString;
}, "strip", z.ZodTypeAny, {
    txid: string;
    transaction: string;
}, {
    txid: string;
    transaction: string;
}>;
declare const stxDeployContract: {
    method: "stx_deployContract";
    params: z.ZodIntersection<z.ZodObject<{
        name: z.ZodString;
        clarityCode: z.ZodString;
        clarityVersion: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        clarityCode: string;
        clarityVersion?: number | undefined;
    }, {
        name: string;
        clarityCode: string;
        clarityVersion?: number | undefined;
    }>, z.ZodObject<{
        address: z.ZodOptional<z.ZodString>;
        network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
        fee: z.ZodOptional<z.ZodNumber>;
        nonce: z.ZodOptional<z.ZodNumber>;
        postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
        sponsored: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }>>;
    result: z.ZodObject<{
        txid: z.ZodString;
        transaction: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        txid: string;
        transaction: string;
    }, {
        txid: string;
        transaction: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_deployContract">;
        params: z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            clarityCode: z.ZodString;
            clarityVersion: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            clarityCode: string;
            clarityVersion?: number | undefined;
        }, {
            name: string;
            clarityCode: string;
            clarityVersion?: number | undefined;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            name: string;
            clarityCode: string;
            clarityVersion?: number | undefined;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_deployContract";
    }, {
        params: {
            name: string;
            clarityCode: string;
            clarityVersion?: number | undefined;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_deployContract";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const stxAddressItemSchema: z.ZodObject<{
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    publicKey: string;
    derivationPath: string;
}, {
    address: string;
    publicKey: string;
    derivationPath: string;
}>;
declare const stxGetAddressesResponseBodySchema: z.ZodArray<z.ZodObject<{
    address: z.ZodString;
    publicKey: z.ZodString;
    derivationPath: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    publicKey: string;
    derivationPath: string;
}, {
    address: string;
    publicKey: string;
    derivationPath: string;
}>, "many">;
declare const stxGetAddresses: {
    method: "stx_getAddresses";
    params: z.ZodOptional<z.ZodObject<{
        network: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        network?: string | undefined;
    }, {
        network?: string | undefined;
    }>>;
    result: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        publicKey: z.ZodString;
        derivationPath: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        address: string;
        publicKey: string;
        derivationPath: string;
    }, {
        address: string;
        publicKey: string;
        derivationPath: string;
    }>, "many">;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_getAddresses">;
        params: z.ZodOptional<z.ZodObject<{
            network: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
        }, {
            network?: string | undefined;
        }>>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        method: "stx_getAddresses";
        params?: {
            network?: string | undefined;
        } | undefined;
    }, {
        method: "stx_getAddresses";
        params?: {
            network?: string | undefined;
        } | undefined;
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            address: string;
            publicKey: string;
            derivationPath: string;
        }, {
            address: string;
            publicKey: string;
            derivationPath: string;
        }>, "many">;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            address: string;
            publicKey: string;
            derivationPath: string;
        }[];
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            address: string;
            publicKey: string;
            derivationPath: string;
        }[];
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const stxTransferSip9Nft: {
    method: "stx_transferSip9Nft";
    params: z.ZodIntersection<z.ZodObject<{
        recipient: z.ZodString;
        asset: z.ZodString;
        assetId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        recipient: string;
        asset: string;
        assetId: string;
    }, {
        recipient: string;
        asset: string;
        assetId: string;
    }>, z.ZodObject<{
        address: z.ZodOptional<z.ZodString>;
        network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
        fee: z.ZodOptional<z.ZodNumber>;
        nonce: z.ZodOptional<z.ZodNumber>;
        postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
        sponsored: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }>>;
    result: z.ZodObject<{
        txid: z.ZodString;
        transaction: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        txid: string;
        transaction: string;
    }, {
        txid: string;
        transaction: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_transferSip9Nft">;
        params: z.ZodIntersection<z.ZodObject<{
            recipient: z.ZodString;
            asset: z.ZodString;
            assetId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            recipient: string;
            asset: string;
            assetId: string;
        }, {
            recipient: string;
            asset: string;
            assetId: string;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            recipient: string;
            asset: string;
            assetId: string;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_transferSip9Nft";
    }, {
        params: {
            recipient: string;
            asset: string;
            assetId: string;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_transferSip9Nft";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const stxTransferSip10Ft: {
    method: "stx_transferSip10Ft";
    params: z.ZodIntersection<z.ZodObject<{
        recipient: z.ZodString;
        asset: z.ZodString;
        amount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        amount: number;
        recipient: string;
        asset: string;
    }, {
        amount: number;
        recipient: string;
        asset: string;
    }>, z.ZodObject<{
        address: z.ZodOptional<z.ZodString>;
        network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
        fee: z.ZodOptional<z.ZodNumber>;
        nonce: z.ZodOptional<z.ZodNumber>;
        postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
        sponsored: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }>>;
    result: z.ZodObject<{
        txid: z.ZodString;
        transaction: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        txid: string;
        transaction: string;
    }, {
        txid: string;
        transaction: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_transferSip10Ft">;
        params: z.ZodIntersection<z.ZodObject<{
            recipient: z.ZodString;
            asset: z.ZodString;
            amount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            amount: number;
            recipient: string;
            asset: string;
        }, {
            amount: number;
            recipient: string;
            asset: string;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            amount: number;
            recipient: string;
            asset: string;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_transferSip10Ft";
    }, {
        params: {
            amount: number;
            recipient: string;
            asset: string;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_transferSip10Ft";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const stxTransferStx: {
    method: "stx_transferStx";
    params: z.ZodIntersection<z.ZodObject<{
        recipient: z.ZodString;
        amount: z.ZodNumber;
        memo: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        amount: number;
        recipient: string;
        memo?: string | undefined;
    }, {
        amount: number;
        recipient: string;
        memo?: string | undefined;
    }>, z.ZodObject<{
        address: z.ZodOptional<z.ZodString>;
        network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
        fee: z.ZodOptional<z.ZodNumber>;
        nonce: z.ZodOptional<z.ZodNumber>;
        postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
        sponsored: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }, {
        network?: string | undefined;
        address?: string | undefined;
        fee?: number | undefined;
        nonce?: number | undefined;
        postConditions?: string[] | undefined;
        postConditionMode?: "allow" | "deny" | undefined;
        sponsored?: boolean | undefined;
    }>>;
    result: z.ZodObject<{
        txid: z.ZodString;
        transaction: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        txid: string;
        transaction: string;
    }, {
        txid: string;
        transaction: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_transferStx">;
        params: z.ZodIntersection<z.ZodObject<{
            recipient: z.ZodString;
            amount: z.ZodNumber;
            memo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            amount: number;
            recipient: string;
            memo?: string | undefined;
        }, {
            amount: number;
            recipient: string;
            memo?: string | undefined;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            amount: number;
            recipient: string;
            memo?: string | undefined;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_transferStx";
    }, {
        params: {
            amount: number;
            recipient: string;
            memo?: string | undefined;
        } & {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        };
        method: "stx_transferStx";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const stxUpdateProfileRequestParamsSchema: z.ZodObject<{
    person: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    person: {} & {
        [k: string]: unknown;
    };
}, {
    person: {} & {
        [k: string]: unknown;
    };
}>;
declare const stxUpdateProfileResponseBodySchema: z.ZodObject<{
    txid: z.ZodString;
    transaction: z.ZodString;
}, "strip", z.ZodTypeAny, {
    txid: string;
    transaction: string;
}, {
    txid: string;
    transaction: string;
}>;
declare const stxUpdateProfile: {
    method: "stx_updateProfile";
    params: z.ZodObject<{
        person: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        person: {} & {
            [k: string]: unknown;
        };
    }, {
        person: {} & {
            [k: string]: unknown;
        };
    }>;
    result: z.ZodObject<{
        txid: z.ZodString;
        transaction: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        txid: string;
        transaction: string;
    }, {
        txid: string;
        transaction: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"stx_updateProfile">;
        params: z.ZodObject<{
            person: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
        }, "strip", z.ZodTypeAny, {
            person: {} & {
                [k: string]: unknown;
            };
        }, {
            person: {} & {
                [k: string]: unknown;
            };
        }>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            person: {} & {
                [k: string]: unknown;
            };
        };
        method: "stx_updateProfile";
    }, {
        params: {
            person: {} & {
                [k: string]: unknown;
            };
        };
        method: "stx_updateProfile";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            txid: string;
            transaction: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const supportedMethodSchema: z.ZodObject<{
    name: z.ZodString;
    docsUrl: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    name: string;
    docsUrl: string | string[];
}, {
    name: string;
    docsUrl: string | string[];
}>;
declare const supportedMethods: {
    method: "supportedMethods";
    result: z.ZodObject<{
        documentation: z.ZodString;
        methods: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            docsUrl: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            docsUrl: string | string[];
        }, {
            name: string;
            docsUrl: string | string[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        documentation: string;
        methods: {
            name: string;
            docsUrl: string | string[];
        }[];
    }, {
        documentation: string;
        methods: {
            name: string;
            docsUrl: string | string[];
        }[];
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"supportedMethods">;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        method: "supportedMethods";
    }, {
        method: "supportedMethods";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            documentation: z.ZodString;
            methods: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                docsUrl: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                docsUrl: string | string[];
            }, {
                name: string;
                docsUrl: string | string[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            documentation: string;
            methods: {
                name: string;
                docsUrl: string | string[];
            }[];
        }, {
            documentation: string;
            methods: {
                name: string;
                docsUrl: string | string[];
            }[];
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            documentation: string;
            methods: {
                name: string;
                docsUrl: string | string[];
            }[];
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            documentation: string;
            methods: {
                name: string;
                docsUrl: string | string[];
            }[];
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const open: {
    method: "open";
    params: z.ZodObject<{
        base: z.ZodString;
        quote: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        base: string;
        quote: string;
    }, {
        base: string;
        quote: string;
    }>;
    result: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"open">;
        params: z.ZodObject<{
            base: z.ZodString;
            quote: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            base: string;
            quote: string;
        }, {
            base: string;
            quote: string;
        }>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            base: string;
            quote: string;
        };
        method: "open";
    }, {
        params: {
            base: string;
            quote: string;
        };
        method: "open";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
        }, {
            message: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            message: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            message: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const openSwap: {
    method: "openSwap";
    params: z.ZodObject<{
        base: z.ZodString;
        quote: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        base: string;
        quote: string;
    }, {
        base: string;
        quote: string;
    }>;
    result: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
    error: z.ZodType<{
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }, z.ZodTypeDef, {
        code: number;
        message: string;
        data?: string[] | Record<string, unknown> | undefined;
    }>;
    request: z.ZodObject<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jsonrpc: "2.0";
    }, {
        id: string;
        jsonrpc: "2.0";
    }> & z.ZodObject<{
        method: z.ZodLiteral<"openSwap">;
        params: z.ZodObject<{
            base: z.ZodString;
            quote: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            base: string;
            quote: string;
        }, {
            base: string;
            quote: string;
        }>;
    }, z.UnknownKeysParam, z.ZodTypeAny, {
        params: {
            base: string;
            quote: string;
        };
        method: "openSwap";
    }, {
        params: {
            base: string;
            quote: string;
        };
        method: "openSwap";
    }>;
    response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        result: z.ZodObject<{
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
        }, {
            message: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        result: {
            message: string;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        result: {
            message: string;
        };
        jsonrpc: "2.0";
    }>, z.ZodObject<z.objectUtil.extendShape<{
        jsonrpc: z.ZodLiteral<"2.0">;
        id: z.ZodString;
    }, {
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }, {
        id: string;
        error: {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        };
        jsonrpc: "2.0";
    }>]>;
};

declare const endpoints: {
    readonly getAddresses: {
        method: "getAddresses";
        params: z.ZodOptional<z.ZodObject<{
            network: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
        }, {
            network?: string | undefined;
        }>>;
        result: z.ZodObject<{
            addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>, "many">;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>, "many">;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2wpkh">;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                symbol: z.ZodLiteral<"BTC">;
                type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, {
                type: z.ZodLiteral<"p2tr">;
                tweakedPublicKey: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                symbol: z.ZodLiteral<"STX">;
                address: z.ZodString;
                publicKey: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>, "many">;
        }, z.ZodTypeAny, "passthrough">>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"getAddresses">;
            params: z.ZodOptional<z.ZodObject<{
                network: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                network?: string | undefined;
            }, {
                network?: string | undefined;
            }>>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            method: "getAddresses";
            params?: {
                network?: string | undefined;
            } | undefined;
        }, {
            method: "getAddresses";
            params?: {
                network?: string | undefined;
            } | undefined;
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, z.ZodTypeAny, "passthrough">>]>, "many">;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, z.ZodTypeAny, "passthrough">>]>, "many">;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                addresses: z.ZodArray<z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, z.ZodTypeAny, "passthrough">>]>, "many">;
            }, z.ZodTypeAny, "passthrough">>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                addresses: (z.objectOutputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, z.ZodTypeAny, "passthrough"> | z.objectOutputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, z.ZodTypeAny, "passthrough">)[];
            } & {
                [k: string]: unknown;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                addresses: (z.objectInputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2wpkh">;
                }>, z.ZodTypeAny, "passthrough"> | z.objectInputType<z.objectUtil.extendShape<{
                    symbol: z.ZodLiteral<"BTC">;
                    type: z.ZodEnum<["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]>;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                    derivationPath: z.ZodString;
                }, {
                    type: z.ZodLiteral<"p2tr">;
                    tweakedPublicKey: z.ZodString;
                }>, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    symbol: z.ZodLiteral<"STX">;
                    address: z.ZodString;
                    publicKey: z.ZodString;
                }, z.ZodTypeAny, "passthrough">)[];
            } & {
                [k: string]: unknown;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly getInfo: {
        method: "getInfo";
        result: z.ZodObject<{
            version: z.ZodString;
            supportedMethods: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            version: string;
            supportedMethods?: string[] | undefined;
        }, {
            version: string;
            supportedMethods?: string[] | undefined;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"getInfo">;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            method: "getInfo";
        }, {
            method: "getInfo";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                version: z.ZodString;
                supportedMethods: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                version: string;
                supportedMethods?: string[] | undefined;
            }, {
                version: string;
                supportedMethods?: string[] | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                version: string;
                supportedMethods?: string[] | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                version: string;
                supportedMethods?: string[] | undefined;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly open: {
        method: "open";
        params: z.ZodObject<{
            base: z.ZodString;
            quote: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            base: string;
            quote: string;
        }, {
            base: string;
            quote: string;
        }>;
        result: z.ZodObject<{
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
        }, {
            message: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"open">;
            params: z.ZodObject<{
                base: z.ZodString;
                quote: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                base: string;
                quote: string;
            }, {
                base: string;
                quote: string;
            }>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                base: string;
                quote: string;
            };
            method: "open";
        }, {
            params: {
                base: string;
                quote: string;
            };
            method: "open";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                message: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                message: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly openSwap: {
        method: "openSwap";
        params: z.ZodObject<{
            base: z.ZodString;
            quote: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            base: string;
            quote: string;
        }, {
            base: string;
            quote: string;
        }>;
        result: z.ZodObject<{
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
        }, {
            message: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"openSwap">;
            params: z.ZodObject<{
                base: z.ZodString;
                quote: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                base: string;
                quote: string;
            }, {
                base: string;
                quote: string;
            }>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                base: string;
                quote: string;
            };
            method: "openSwap";
        }, {
            params: {
                base: string;
                quote: string;
            };
            method: "openSwap";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                message: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                message: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly sendTransfer: {
        method: "sendTransfer";
        params: z.ZodUnion<[z.ZodObject<{
            account: z.ZodOptional<z.ZodNumber>;
            address: z.ZodString;
            amount: z.ZodString;
            network: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            network: string;
            address: string;
            amount: string;
            account?: number | undefined;
        }, {
            network: string;
            address: string;
            amount: string;
            account?: number | undefined;
        }>, z.ZodObject<{
            account: z.ZodOptional<z.ZodNumber>;
            recipients: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                amount: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                address: string;
                amount: string;
            }, {
                address: string;
                amount: string;
            }>, "many">;
            network: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            network: string;
            recipients: {
                address: string;
                amount: string;
            }[];
            account?: number | undefined;
        }, {
            network: string;
            recipients: {
                address: string;
                amount: string;
            }[];
            account?: number | undefined;
        }>]>;
        result: z.ZodObject<{
            txid: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
        }, {
            txid: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"sendTransfer">;
            params: z.ZodUnion<[z.ZodObject<{
                account: z.ZodOptional<z.ZodNumber>;
                address: z.ZodString;
                amount: z.ZodString;
                network: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                network: string;
                address: string;
                amount: string;
                account?: number | undefined;
            }, {
                network: string;
                address: string;
                amount: string;
                account?: number | undefined;
            }>, z.ZodObject<{
                account: z.ZodOptional<z.ZodNumber>;
                recipients: z.ZodArray<z.ZodObject<{
                    address: z.ZodString;
                    amount: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    address: string;
                    amount: string;
                }, {
                    address: string;
                    amount: string;
                }>, "many">;
                network: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                network: string;
                recipients: {
                    address: string;
                    amount: string;
                }[];
                account?: number | undefined;
            }, {
                network: string;
                recipients: {
                    address: string;
                    amount: string;
                }[];
                account?: number | undefined;
            }>]>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                network: string;
                address: string;
                amount: string;
                account?: number | undefined;
            } | {
                network: string;
                recipients: {
                    address: string;
                    amount: string;
                }[];
                account?: number | undefined;
            };
            method: "sendTransfer";
        }, {
            params: {
                network: string;
                address: string;
                amount: string;
                account?: number | undefined;
            } | {
                network: string;
                recipients: {
                    address: string;
                    amount: string;
                }[];
                account?: number | undefined;
            };
            method: "sendTransfer";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                txid: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                txid: string;
            }, {
                txid: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                txid: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                txid: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly signMessage: {
        method: "signMessage";
        params: z.ZodObject<{
            type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
            account: z.ZodOptional<z.ZodNumber>;
            message: z.ZodString;
            paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
            account: z.ZodOptional<z.ZodNumber>;
            message: z.ZodString;
            paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
            account: z.ZodOptional<z.ZodNumber>;
            message: z.ZodString;
            paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
        }, z.ZodTypeAny, "passthrough">>;
        result: z.ZodObject<{
            signature: z.ZodString;
            address: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            signature: z.ZodString;
            address: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            signature: z.ZodString;
            address: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"signMessage">;
            params: z.ZodObject<{
                type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
                account: z.ZodOptional<z.ZodNumber>;
                message: z.ZodString;
                paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
                account: z.ZodOptional<z.ZodNumber>;
                message: z.ZodString;
                paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodOptional<z.ZodEnum<["legacy", "bip322"]>>;
                account: z.ZodOptional<z.ZodNumber>;
                message: z.ZodString;
                paymentType: z.ZodEnum<["p2tr", "p2wpkh"]>;
            }, z.ZodTypeAny, "passthrough">>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                message: string;
                paymentType: "p2wpkh" | "p2tr";
                type?: "legacy" | "bip322" | undefined;
                account?: number | undefined;
            } & {
                [k: string]: unknown;
            };
            method: "signMessage";
        }, {
            params: {
                message: string;
                paymentType: "p2wpkh" | "p2tr";
                type?: "legacy" | "bip322" | undefined;
                account?: number | undefined;
            } & {
                [k: string]: unknown;
            };
            method: "signMessage";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                signature: z.ZodString;
                address: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                signature: z.ZodString;
                address: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                signature: z.ZodString;
                address: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                address: string;
                signature: string;
            } & {
                [k: string]: unknown;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                address: string;
                signature: string;
            } & {
                [k: string]: unknown;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly signPsbt: {
        method: "signPsbt";
        params: z.ZodObject<{
            account: z.ZodOptional<z.ZodNumber>;
            allowedSighash: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
            broadcast: z.ZodOptional<z.ZodBoolean>;
            hex: z.ZodString;
            network: z.ZodOptional<z.ZodString>;
            signAtIndex: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>, number | number[] | undefined, number | number[] | undefined>;
        }, "strip", z.ZodTypeAny, {
            hex: string;
            network?: string | undefined;
            account?: number | undefined;
            allowedSighash?: any[] | undefined;
            broadcast?: boolean | undefined;
            signAtIndex?: number | number[] | undefined;
        }, {
            hex: string;
            network?: string | undefined;
            account?: number | undefined;
            allowedSighash?: any[] | undefined;
            broadcast?: boolean | undefined;
            signAtIndex?: number | number[] | undefined;
        }>;
        result: z.ZodObject<{
            hex: z.ZodString;
            txid: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            hex: string;
            txid?: string | undefined;
        }, {
            hex: string;
            txid?: string | undefined;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"signPsbt">;
            params: z.ZodObject<{
                account: z.ZodOptional<z.ZodNumber>;
                allowedSighash: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
                broadcast: z.ZodOptional<z.ZodBoolean>;
                hex: z.ZodString;
                network: z.ZodOptional<z.ZodString>;
                signAtIndex: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>, number | number[] | undefined, number | number[] | undefined>;
            }, "strip", z.ZodTypeAny, {
                hex: string;
                network?: string | undefined;
                account?: number | undefined;
                allowedSighash?: any[] | undefined;
                broadcast?: boolean | undefined;
                signAtIndex?: number | number[] | undefined;
            }, {
                hex: string;
                network?: string | undefined;
                account?: number | undefined;
                allowedSighash?: any[] | undefined;
                broadcast?: boolean | undefined;
                signAtIndex?: number | number[] | undefined;
            }>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                hex: string;
                network?: string | undefined;
                account?: number | undefined;
                allowedSighash?: any[] | undefined;
                broadcast?: boolean | undefined;
                signAtIndex?: number | number[] | undefined;
            };
            method: "signPsbt";
        }, {
            params: {
                hex: string;
                network?: string | undefined;
                account?: number | undefined;
                allowedSighash?: any[] | undefined;
                broadcast?: boolean | undefined;
                signAtIndex?: number | number[] | undefined;
            };
            method: "signPsbt";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                hex: z.ZodString;
                txid: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                hex: string;
                txid?: string | undefined;
            }, {
                hex: string;
                txid?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                hex: string;
                txid?: string | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                hex: string;
                txid?: string | undefined;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxCallContract: {
        method: "stx_callContract";
        params: z.ZodIntersection<z.ZodObject<{
            contract: z.ZodString;
            functionName: z.ZodString;
            functionArgs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            contract: string;
            functionName: string;
            functionArgs?: string[] | undefined;
        }, {
            contract: string;
            functionName: string;
            functionArgs?: string[] | undefined;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_callContract">;
            params: z.ZodIntersection<z.ZodObject<{
                contract: z.ZodString;
                functionName: z.ZodString;
                functionArgs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                contract: string;
                functionName: string;
                functionArgs?: string[] | undefined;
            }, {
                contract: string;
                functionName: string;
                functionArgs?: string[] | undefined;
            }>, z.ZodObject<{
                address: z.ZodOptional<z.ZodString>;
                network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
                fee: z.ZodOptional<z.ZodNumber>;
                nonce: z.ZodOptional<z.ZodNumber>;
                postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
                sponsored: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }>>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                contract: string;
                functionName: string;
                functionArgs?: string[] | undefined;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_callContract";
        }, {
            params: {
                contract: string;
                functionName: string;
                functionArgs?: string[] | undefined;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_callContract";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                txid: z.ZodString;
                transaction: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                txid: string;
                transaction: string;
            }, {
                txid: string;
                transaction: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxDeployContract: {
        method: "stx_deployContract";
        params: z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            clarityCode: z.ZodString;
            clarityVersion: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            clarityCode: string;
            clarityVersion?: number | undefined;
        }, {
            name: string;
            clarityCode: string;
            clarityVersion?: number | undefined;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_deployContract">;
            params: z.ZodIntersection<z.ZodObject<{
                name: z.ZodString;
                clarityCode: z.ZodString;
                clarityVersion: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                clarityCode: string;
                clarityVersion?: number | undefined;
            }, {
                name: string;
                clarityCode: string;
                clarityVersion?: number | undefined;
            }>, z.ZodObject<{
                address: z.ZodOptional<z.ZodString>;
                network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
                fee: z.ZodOptional<z.ZodNumber>;
                nonce: z.ZodOptional<z.ZodNumber>;
                postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
                sponsored: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }>>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                name: string;
                clarityCode: string;
                clarityVersion?: number | undefined;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_deployContract";
        }, {
            params: {
                name: string;
                clarityCode: string;
                clarityVersion?: number | undefined;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_deployContract";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                txid: z.ZodString;
                transaction: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                txid: string;
                transaction: string;
            }, {
                txid: string;
                transaction: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxGetAddresses: {
        method: "stx_getAddresses";
        params: z.ZodOptional<z.ZodObject<{
            network: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
        }, {
            network?: string | undefined;
        }>>;
        result: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            publicKey: z.ZodString;
            derivationPath: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            address: string;
            publicKey: string;
            derivationPath: string;
        }, {
            address: string;
            publicKey: string;
            derivationPath: string;
        }>, "many">;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_getAddresses">;
            params: z.ZodOptional<z.ZodObject<{
                network: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                network?: string | undefined;
            }, {
                network?: string | undefined;
            }>>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            method: "stx_getAddresses";
            params?: {
                network?: string | undefined;
            } | undefined;
        }, {
            method: "stx_getAddresses";
            params?: {
                network?: string | undefined;
            } | undefined;
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                publicKey: z.ZodString;
                derivationPath: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                address: string;
                publicKey: string;
                derivationPath: string;
            }, {
                address: string;
                publicKey: string;
                derivationPath: string;
            }>, "many">;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                address: string;
                publicKey: string;
                derivationPath: string;
            }[];
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                address: string;
                publicKey: string;
                derivationPath: string;
            }[];
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxGetNetworks: {
        method: "stx_getNetworks";
        result: z.ZodObject<{
            active: z.ZodString;
            networks: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                chainId: z.ZodString;
                transactionVersion: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                id: z.ZodString;
                chainId: z.ZodString;
                transactionVersion: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                id: z.ZodString;
                chainId: z.ZodString;
                transactionVersion: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, "many">;
        }, "strip", z.ZodTypeAny, {
            active: string;
            networks: z.objectOutputType<{
                id: z.ZodString;
                chainId: z.ZodString;
                transactionVersion: z.ZodString;
            }, z.ZodTypeAny, "passthrough">[];
        }, {
            active: string;
            networks: z.objectInputType<{
                id: z.ZodString;
                chainId: z.ZodString;
                transactionVersion: z.ZodString;
            }, z.ZodTypeAny, "passthrough">[];
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_getNetworks">;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            method: "stx_getNetworks";
        }, {
            method: "stx_getNetworks";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                active: z.ZodString;
                networks: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    chainId: z.ZodString;
                    transactionVersion: z.ZodString;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    id: z.ZodString;
                    chainId: z.ZodString;
                    transactionVersion: z.ZodString;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    id: z.ZodString;
                    chainId: z.ZodString;
                    transactionVersion: z.ZodString;
                }, z.ZodTypeAny, "passthrough">>, "many">;
            }, "strip", z.ZodTypeAny, {
                active: string;
                networks: z.objectOutputType<{
                    id: z.ZodString;
                    chainId: z.ZodString;
                    transactionVersion: z.ZodString;
                }, z.ZodTypeAny, "passthrough">[];
            }, {
                active: string;
                networks: z.objectInputType<{
                    id: z.ZodString;
                    chainId: z.ZodString;
                    transactionVersion: z.ZodString;
                }, z.ZodTypeAny, "passthrough">[];
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                active: string;
                networks: z.objectOutputType<{
                    id: z.ZodString;
                    chainId: z.ZodString;
                    transactionVersion: z.ZodString;
                }, z.ZodTypeAny, "passthrough">[];
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                active: string;
                networks: z.objectInputType<{
                    id: z.ZodString;
                    chainId: z.ZodString;
                    transactionVersion: z.ZodString;
                }, z.ZodTypeAny, "passthrough">[];
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxSignMessage: {
        method: "stx_signMessage";
        params: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
            network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
        }, {
            messageType: z.ZodDefault<z.ZodLiteral<"utf8">>;
            message: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            message: string;
            messageType: "utf8";
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        }, {
            message: string;
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
            messageType?: "utf8" | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
            network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
        }, {
            messageType: z.ZodLiteral<"structured">;
            domain: z.ZodString;
            message: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            message: string;
            messageType: "structured";
            domain: string;
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        }, {
            message: string;
            messageType: "structured";
            domain: string;
            network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
        }>]>;
        result: z.ZodObject<{
            signature: z.ZodString;
            publicKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
        }, {
            publicKey: string;
            signature: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_signMessage">;
            params: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
                network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
            }, {
                messageType: z.ZodDefault<z.ZodLiteral<"utf8">>;
                message: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                message: string;
                messageType: "utf8";
                network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
            }, {
                message: string;
                network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
                messageType?: "utf8" | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                messageType: z.ZodDefault<z.ZodOptional<z.ZodEnum<["utf8", "structured"]>>>;
                network: z.ZodOptional<z.ZodEnum<["mainnet", "testnet", "devnet", "mocknet"]>>;
            }, {
                messageType: z.ZodLiteral<"structured">;
                domain: z.ZodString;
                message: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                message: string;
                messageType: "structured";
                domain: string;
                network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
            }, {
                message: string;
                messageType: "structured";
                domain: string;
                network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
            }>]>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                message: string;
                messageType: "utf8";
                network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
            } | {
                message: string;
                messageType: "structured";
                domain: string;
                network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
            };
            method: "stx_signMessage";
        }, {
            params: {
                message: string;
                network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
                messageType?: "utf8" | undefined;
            } | {
                message: string;
                messageType: "structured";
                domain: string;
                network?: "mainnet" | "testnet" | "devnet" | "mocknet" | undefined;
            };
            method: "stx_signMessage";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                signature: z.ZodString;
                publicKey: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
            }, {
                publicKey: string;
                signature: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                publicKey: string;
                signature: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                publicKey: string;
                signature: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxSignStructuredMessage: {
        method: "stx_signStructuredMessage";
        params: z.ZodObject<{
            domain: z.ZodString;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            domain: string;
        }, {
            message: string;
            domain: string;
        }>;
        result: z.ZodObject<{
            signature: z.ZodString;
            publicKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
        }, {
            publicKey: string;
            signature: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_signStructuredMessage">;
            params: z.ZodObject<{
                domain: z.ZodString;
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
                domain: string;
            }, {
                message: string;
                domain: string;
            }>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                message: string;
                domain: string;
            };
            method: "stx_signStructuredMessage";
        }, {
            params: {
                message: string;
                domain: string;
            };
            method: "stx_signStructuredMessage";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                signature: z.ZodString;
                publicKey: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
            }, {
                publicKey: string;
                signature: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                publicKey: string;
                signature: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                publicKey: string;
                signature: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxSignTransaction: {
        method: "stx_signTransaction";
        params: z.ZodUnion<[z.ZodObject<{
            txHex: z.ZodString;
            stxAddress: z.ZodOptional<z.ZodString>;
            attachment: z.ZodOptional<z.ZodString>;
            accountIndex: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            txHex: string;
            network?: string | undefined;
            stxAddress?: string | undefined;
            attachment?: string | undefined;
            accountIndex?: string | undefined;
        }, {
            txHex: string;
            network?: string | undefined;
            stxAddress?: string | undefined;
            attachment?: string | undefined;
            accountIndex?: string | undefined;
        }>, z.ZodObject<{
            transaction: z.ZodString;
            network: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            transaction: string;
            network?: string | undefined;
        }, {
            transaction: string;
            network?: string | undefined;
        }>]>;
        result: z.ZodObject<{
            transaction: z.ZodString;
            txHex: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            transaction: string;
            txHex: string;
        }, {
            transaction: string;
            txHex: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_signTransaction">;
            params: z.ZodUnion<[z.ZodObject<{
                txHex: z.ZodString;
                stxAddress: z.ZodOptional<z.ZodString>;
                attachment: z.ZodOptional<z.ZodString>;
                accountIndex: z.ZodOptional<z.ZodString>;
                network: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                txHex: string;
                network?: string | undefined;
                stxAddress?: string | undefined;
                attachment?: string | undefined;
                accountIndex?: string | undefined;
            }, {
                txHex: string;
                network?: string | undefined;
                stxAddress?: string | undefined;
                attachment?: string | undefined;
                accountIndex?: string | undefined;
            }>, z.ZodObject<{
                transaction: z.ZodString;
                network: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                transaction: string;
                network?: string | undefined;
            }, {
                transaction: string;
                network?: string | undefined;
            }>]>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                txHex: string;
                network?: string | undefined;
                stxAddress?: string | undefined;
                attachment?: string | undefined;
                accountIndex?: string | undefined;
            } | {
                transaction: string;
                network?: string | undefined;
            };
            method: "stx_signTransaction";
        }, {
            params: {
                txHex: string;
                network?: string | undefined;
                stxAddress?: string | undefined;
                attachment?: string | undefined;
                accountIndex?: string | undefined;
            } | {
                transaction: string;
                network?: string | undefined;
            };
            method: "stx_signTransaction";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                transaction: z.ZodString;
                txHex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                transaction: string;
                txHex: string;
            }, {
                transaction: string;
                txHex: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                transaction: string;
                txHex: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                transaction: string;
                txHex: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxTransferSip10Ft: {
        method: "stx_transferSip10Ft";
        params: z.ZodIntersection<z.ZodObject<{
            recipient: z.ZodString;
            asset: z.ZodString;
            amount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            amount: number;
            recipient: string;
            asset: string;
        }, {
            amount: number;
            recipient: string;
            asset: string;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_transferSip10Ft">;
            params: z.ZodIntersection<z.ZodObject<{
                recipient: z.ZodString;
                asset: z.ZodString;
                amount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                amount: number;
                recipient: string;
                asset: string;
            }, {
                amount: number;
                recipient: string;
                asset: string;
            }>, z.ZodObject<{
                address: z.ZodOptional<z.ZodString>;
                network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
                fee: z.ZodOptional<z.ZodNumber>;
                nonce: z.ZodOptional<z.ZodNumber>;
                postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
                sponsored: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }>>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                amount: number;
                recipient: string;
                asset: string;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_transferSip10Ft";
        }, {
            params: {
                amount: number;
                recipient: string;
                asset: string;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_transferSip10Ft";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                txid: z.ZodString;
                transaction: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                txid: string;
                transaction: string;
            }, {
                txid: string;
                transaction: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxTransferSip9Nft: {
        method: "stx_transferSip9Nft";
        params: z.ZodIntersection<z.ZodObject<{
            recipient: z.ZodString;
            asset: z.ZodString;
            assetId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            recipient: string;
            asset: string;
            assetId: string;
        }, {
            recipient: string;
            asset: string;
            assetId: string;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_transferSip9Nft">;
            params: z.ZodIntersection<z.ZodObject<{
                recipient: z.ZodString;
                asset: z.ZodString;
                assetId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                recipient: string;
                asset: string;
                assetId: string;
            }, {
                recipient: string;
                asset: string;
                assetId: string;
            }>, z.ZodObject<{
                address: z.ZodOptional<z.ZodString>;
                network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
                fee: z.ZodOptional<z.ZodNumber>;
                nonce: z.ZodOptional<z.ZodNumber>;
                postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
                sponsored: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }>>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                recipient: string;
                asset: string;
                assetId: string;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_transferSip9Nft";
        }, {
            params: {
                recipient: string;
                asset: string;
                assetId: string;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_transferSip9Nft";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                txid: z.ZodString;
                transaction: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                txid: string;
                transaction: string;
            }, {
                txid: string;
                transaction: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxTransferStx: {
        method: "stx_transferStx";
        params: z.ZodIntersection<z.ZodObject<{
            recipient: z.ZodString;
            amount: z.ZodNumber;
            memo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            amount: number;
            recipient: string;
            memo?: string | undefined;
        }, {
            amount: number;
            recipient: string;
            memo?: string | undefined;
        }>, z.ZodObject<{
            address: z.ZodOptional<z.ZodString>;
            network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
            fee: z.ZodOptional<z.ZodNumber>;
            nonce: z.ZodOptional<z.ZodNumber>;
            postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
            sponsored: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }, {
            network?: string | undefined;
            address?: string | undefined;
            fee?: number | undefined;
            nonce?: number | undefined;
            postConditions?: string[] | undefined;
            postConditionMode?: "allow" | "deny" | undefined;
            sponsored?: boolean | undefined;
        }>>;
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_transferStx">;
            params: z.ZodIntersection<z.ZodObject<{
                recipient: z.ZodString;
                amount: z.ZodNumber;
                memo: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                amount: number;
                recipient: string;
                memo?: string | undefined;
            }, {
                amount: number;
                recipient: string;
                memo?: string | undefined;
            }>, z.ZodObject<{
                address: z.ZodOptional<z.ZodString>;
                network: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"mainnet">, z.ZodLiteral<"testnet">, z.ZodLiteral<"regtest">, z.ZodLiteral<"devnet">, z.ZodLiteral<"mocknet">, z.ZodString]>>;
                fee: z.ZodOptional<z.ZodNumber>;
                nonce: z.ZodOptional<z.ZodNumber>;
                postConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                postConditionMode: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"allow">, z.ZodLiteral<"deny">]>>;
                sponsored: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }, {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            }>>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                amount: number;
                recipient: string;
                memo?: string | undefined;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_transferStx";
        }, {
            params: {
                amount: number;
                recipient: string;
                memo?: string | undefined;
            } & {
                network?: string | undefined;
                address?: string | undefined;
                fee?: number | undefined;
                nonce?: number | undefined;
                postConditions?: string[] | undefined;
                postConditionMode?: "allow" | "deny" | undefined;
                sponsored?: boolean | undefined;
            };
            method: "stx_transferStx";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                txid: z.ZodString;
                transaction: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                txid: string;
                transaction: string;
            }, {
                txid: string;
                transaction: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly stxUpdateProfile: {
        method: "stx_updateProfile";
        params: z.ZodObject<{
            person: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
        }, "strip", z.ZodTypeAny, {
            person: {} & {
                [k: string]: unknown;
            };
        }, {
            person: {} & {
                [k: string]: unknown;
            };
        }>;
        result: z.ZodObject<{
            txid: z.ZodString;
            transaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            txid: string;
            transaction: string;
        }, {
            txid: string;
            transaction: string;
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"stx_updateProfile">;
            params: z.ZodObject<{
                person: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
            }, "strip", z.ZodTypeAny, {
                person: {} & {
                    [k: string]: unknown;
                };
            }, {
                person: {} & {
                    [k: string]: unknown;
                };
            }>;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            params: {
                person: {} & {
                    [k: string]: unknown;
                };
            };
            method: "stx_updateProfile";
        }, {
            params: {
                person: {} & {
                    [k: string]: unknown;
                };
            };
            method: "stx_updateProfile";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                txid: z.ZodString;
                transaction: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                txid: string;
                transaction: string;
            }, {
                txid: string;
                transaction: string;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                txid: string;
                transaction: string;
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
    readonly supportedMethods: {
        method: "supportedMethods";
        result: z.ZodObject<{
            documentation: z.ZodString;
            methods: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                docsUrl: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                docsUrl: string | string[];
            }, {
                name: string;
                docsUrl: string | string[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            documentation: string;
            methods: {
                name: string;
                docsUrl: string | string[];
            }[];
        }, {
            documentation: string;
            methods: {
                name: string;
                docsUrl: string | string[];
            }[];
        }>;
        error: z.ZodType<{
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }, z.ZodTypeDef, {
            code: number;
            message: string;
            data?: string[] | Record<string, unknown> | undefined;
        }>;
        request: z.ZodObject<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            jsonrpc: "2.0";
        }, {
            id: string;
            jsonrpc: "2.0";
        }> & z.ZodObject<{
            method: z.ZodLiteral<"supportedMethods">;
        }, z.UnknownKeysParam, z.ZodTypeAny, {
            method: "supportedMethods";
        }, {
            method: "supportedMethods";
        }>;
        response: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            result: z.ZodObject<{
                documentation: z.ZodString;
                methods: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    docsUrl: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    docsUrl: string | string[];
                }, {
                    name: string;
                    docsUrl: string | string[];
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                documentation: string;
                methods: {
                    name: string;
                    docsUrl: string | string[];
                }[];
            }, {
                documentation: string;
                methods: {
                    name: string;
                    docsUrl: string | string[];
                }[];
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            result: {
                documentation: string;
                methods: {
                    name: string;
                    docsUrl: string | string[];
                }[];
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            result: {
                documentation: string;
                methods: {
                    name: string;
                    docsUrl: string | string[];
                }[];
            };
            jsonrpc: "2.0";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            jsonrpc: z.ZodLiteral<"2.0">;
            id: z.ZodString;
        }, {
            error: z.ZodType<{
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }, z.ZodTypeDef, {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }, {
            id: string;
            error: {
                code: number;
                message: string;
                data?: string[] | Record<string, unknown> | undefined;
            };
            jsonrpc: "2.0";
        }>]>;
    };
};
type EndpointMap = (typeof endpoints)[keyof typeof endpoints];
/**
 * Request map keyed by exact method name e.g. `stx_signMessage`
 */
type RpcEndpointMap = {
    [E in EndpointMap as E['method']]: {
        request: z.infer<E['request']>;
        response: z.infer<E['response']>;
    };
};
/** @deprecated */
type LeatherRpcMethodMap = RpcEndpointMap;
type RpcRequests = ValueOf<RpcEndpointMap>['request'];
type RpcResponses = ValueOf<RpcEndpointMap>['response'];
type RpcMethodNames = keyof RpcEndpointMap;
interface RequestFn {
    <T extends RpcMethodNames, P extends RpcEndpointMap[T]['request'] extends {
        params?: infer P;
    } ? P : never>(arg: T, params: P): Promise<ExtractSuccessResponse<RpcEndpointMap[T]['response']>>;
    <T extends RpcMethodNames>(arg: T): Promise<ExtractSuccessResponse<RpcEndpointMap[T]['response']>>;
}
interface ListenFn {
    (method: string, callback: () => void): () => void;
}
/**
 * Leather's provider object set on webpage global `window` object. Set this as
 * a global type object in your project.
 *
 * @example
 * ```
 * declare global {
 *   interface Window {
 *     LeatherProvider?: LeatherProvider;
 *   }
 * }
 * ```
 */
interface LeatherProvider {
    /**
     * Request method. Takes a method name, and optional parameters
     * @returns Typed response for corresponding method
     */
    request: RequestFn;
    /**
     * Listen method. Takes an event name to listen for, and a callback function.
     * @returns An unsubscribe function
     */
    listen: ListenFn;
}
/**
 * Helper to create a successful RPC response object
 */
declare function createRpcSuccessResponse<T extends RpcMethodNames>(_method: T, response: Omit<ExtractSuccessResponse<RpcEndpointMap[T]['response']>, 'jsonrpc'>): ExtractSuccessResponse<RpcEndpointMap[T]["response"]>;
/**
 * Helper to create an error RPC response object
 */
declare function createRpcErrorResponse<T extends RpcMethodNames>(_method: T, error: Omit<ExtractErrorResponse<RpcEndpointMap[T]['response']>, 'jsonrpc'>): RpcEndpointMap[T]["response"];

export { type Address, type Bip322MessageTypes, Bip322MessageTypesSchema, type BitcoinPaymentTypes, type BtcAddress, type BtcAddressBase, type ExtractErrorResponse, type ExtractSuccessResponse, type LeatherProvider, type LeatherRpcMethodMap, type ListenFn, type NativeSegwitAddress, type PaymentTypes, type RequestFn, type RpcBaseProps, type RpcEndpointMap, type RpcErrorBody, RpcErrorCode, type RpcErrorResponse, type RpcMethodNames, type RpcParameter, type RpcParameterByName, type RpcParameterByPosition, type RpcParams, type RpcRequest, type RpcRequests, type RpcResponse, type RpcResponses, type RpcResult, type RpcSendTransferLegacyParams, type RpcSendTransferParams, type RpcSuccessResponse, type RpcSuccessResponseSchema, type StxAddress, type StxSignMessageRequestParamsBase, type StxSignMessageRequestParamsStructured, type StxSignMessageRequestParamsUtf8, type StxSignMessageTypes, type TaprootAddress, addressResponseBodySchema, addressSchema, baseStacksTransactionConfigSchema, bitcoinPaymentTypesSchema, btcAddressBaseSchema, btcAddressSchema, clarityValueSchema, createRequestEncoder, createRpcErrorBodySchema, createRpcErrorResponse, createRpcErrorResponseSchema, createRpcRequestSchema, createRpcResponseSchema, createRpcSuccessResponse, createRpcSuccessResponseSchema, cvAddressSchema, cvAsciiSchema, cvBufferSchema, cvContractSchema, cvErrSchema, cvFalseSchema, cvIntSchema, cvListSchema, cvNoneSchema, cvOkSchema, cvSomeSchema, cvTrueSchema, cvTupleSchema, cvUintSchema, cvUtf8Schema, decodeBase64Json, defaultErrorSchema, defineRpcEndpoint, encodeBase64Json, endpoints, getAddresses, getInfo, open, openSwap, rpcBasePropsSchema, rpcParameterSchema, sendTransfer, signMessage, signMessageRequestParamsSchema, signPsbt, signatureHash, stacksTransactionDetailsSchema, stxAddressItemSchema, stxAddressSchema, stxCallContract, stxDeployContract, stxDeployContractResponseBodySchema, stxGetAddresses, stxGetAddressesResponseBodySchema, stxSignMessage, stxSignMessageRequestBaseSchema, stxSignMessageRequestStructuredSchema, stxSignMessageRequestUtf8Schema, stxSignMessageTypeSchema, stxSignStructuredMessage, stxSignTransaction, stxSignTransactionRequestLeatherRpcParamsSchema, stxSignTransactionRequestSip30ParamsSchema, stxTransferSip10Ft, stxTransferSip9Nft, stxTransferStx, stxUpdateProfile, stxUpdateProfileRequestParamsSchema, stxUpdateProfileResponseBodySchema, supportedMethodSchema, supportedMethods, testIsNumberOrArrayOfNumbers };
