// src/index.ts
import { BigNumber as BigNumber6 } from "bignumber.js";
import { KEBAB_REGEX } from "@leather.io/constants";

// src/counter.ts
function createCounter(startPosition = 0) {
  let count = startPosition;
  return {
    getValue() {
      return count;
    },
    increment() {
      return count += 1;
    },
    incrementBy(amount) {
      return count += amount;
    },
    decrement() {
      return count -= 1;
    }
  };
}

// src/math/calculate-averages.ts
import BigNumber2 from "bignumber.js";

// src/math/helpers.ts
import BigNumber from "bignumber.js";
function initBigNumber(num) {
  if (BigNumber.isBigNumber(num)) return num;
  return isBigInt(num) ? new BigNumber(num.toString()) : new BigNumber(num);
}
function isMultipleOf(multiple) {
  return (num) => num % multiple === 0;
}
function isEven(num) {
  return isMultipleOf(2)(num);
}
function countDecimals(num) {
  const LARGE_NUMBER_OF_DECIMALS = 100;
  BigNumber.config({ DECIMAL_PLACES: LARGE_NUMBER_OF_DECIMALS });
  const amount = initBigNumber(num);
  const decimals = amount.toString(10).split(".")[1];
  return decimals ? decimals.length : 0;
}
function increaseValueByOneMicroStx(value) {
  return new BigNumber(value).plus(1e-6).toNumber();
}

// src/math/calculate-averages.ts
function calculateMeanAverage(numbers) {
  if (numbers.length === 0) return new BigNumber2(0);
  return numbers.map(initBigNumber).reduce((acc, price) => acc.plus(price), new BigNumber2(0)).dividedBy(numbers.length);
}

// src/math/fibonacci.ts
function fibonacci(n = 0) {
  if (n < 0) throw new Error("Cannot calculate from negative number");
  if (n < 2) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}
function* fibonacciGenerator(startIndex = 0) {
  let index = startIndex;
  while (index < Infinity) yield fibonacci(index++);
  return Infinity;
}

// src/money/calculate-money.ts
import { BigNumber as BigNumber5 } from "bignumber.js";
import { formatMarketPair } from "@leather.io/models";

// src/money/format-money.ts
import BigNumber3 from "bignumber.js";
import { currencyDecimalsMap } from "@leather.io/constants";
function isResolutionOfCurrencyKnown(symbol) {
  return symbol in currencyDecimalsMap;
}
function getDecimalsOfSymbolIfKnown(symbol) {
  if (isResolutionOfCurrencyKnown(symbol)) return currencyDecimalsMap[symbol];
  return null;
}
function throwWhenDecimalUnknown(symbol, decimals) {
  if (isUndefined(decimals) && isUndefined(getDecimalsOfSymbolIfKnown(symbol)))
    throw new Error(`Resolution of currency ${symbol} is unknown, must be described`);
}
function createMoneyFromDecimal(value, symbol, resolution) {
  throwWhenDecimalUnknown(symbol, resolution);
  const decimals = getDecimalsOfSymbolIfKnown(symbol) ?? resolution;
  const amount = new BigNumber3(isBigInt(value) ? value.toString() : value).shiftedBy(decimals);
  return Object.freeze({ amount, symbol, decimals });
}
function createMoney(value, symbol, resolution) {
  throwWhenDecimalUnknown(symbol, resolution);
  const decimals = getDecimalsOfSymbolIfKnown(symbol) ?? resolution;
  const amount = new BigNumber3(isBigInt(value) ? value.toString() : value);
  return Object.freeze({ amount, symbol, decimals });
}
var thinSpace = "\u2009";
function formatMoney({ amount, symbol, decimals }) {
  return `${amount.shiftedBy(-decimals).toString()} ${symbol}`;
}
function formatMoneyWithoutSymbol({ amount, decimals }) {
  return `${amount.shiftedBy(-decimals).toString()}`;
}
function formatMoneyToFixedDecimal({ amount, symbol, decimals }, fixedDecimals) {
  return `${amount.shiftedBy(-decimals).toFixed(fixedDecimals)} ${symbol}`;
}
function formatMoneyToFixedDecimalWithoutSymbol({ amount, decimals }, fixedDecimals) {
  return `${amount.shiftedBy(-decimals).toFixed(fixedDecimals)}`;
}
function formatMoneyPadded({ amount, symbol, decimals }) {
  return `${amount.shiftedBy(-decimals).toFormat(decimals)} ${symbol}`;
}
function i18nFormatCurrency(quantity, decimals = 2) {
  const currencyFormatter = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: quantity.symbol,
    maximumFractionDigits: decimals
  });
  const formatted = currencyFormatter.format(
    quantity.amount.shiftedBy(-quantity.decimals).toNumber()
  );
  if (quantity.amount.isGreaterThan(0) && formatted === "$0.00")
    return "<" + thinSpace + formatted.replace("0.00", "0.01");
  return formatted;
}
function formatDustUsdAmounts(value) {
  return value.endsWith("0.00") ? "<" + thinSpace + value.replace("0.00", "0.01") : value;
}

// src/money/is-money.ts
import BigNumber4 from "bignumber.js";
function isMoney(val) {
  if (!isObject(val)) return false;
  return "amount" in val && "symbol" in val && "decimals" in val;
}
function isMoneyGreaterThanZero(money) {
  if (!BigNumber4.isBigNumber(money.amount)) return;
  return !(money.amount.isNaN() || money.amount.isZero());
}

// src/money/calculate-money.ts
function baseCurrencyAmountInQuoteWithFallback(quantity, marketData) {
  return marketData ? baseCurrencyAmountInQuote(quantity, marketData) : createMoney(0, "USD");
}
function baseCurrencyAmountInQuote(quantity, { pair, price }) {
  if (quantity.symbol !== pair.base)
    throw new Error(
      `Cannot calculate value of ${formatMoney(quantity)} with market pair of ${formatMarketPair(
        pair
      )}`
    );
  return createMoney(
    convertAmountToFractionalUnit(
      convertAmountToBaseUnit(quantity).times(convertAmountToBaseUnit(price)),
      price.decimals
    ),
    pair.quote
  );
}
function convertAmountToFractionalUnit(num, decimals) {
  if (isMoney(num)) return num.amount.shiftedBy(num.decimals);
  if (!isNumber(decimals)) throw new Error("Must define decimal of given currency");
  return num.shiftedBy(decimals);
}
function convertToMoneyTypeWithDefaultOfZero(symbol, num, decimals) {
  return createMoney(initBigNumber(num ?? 0), symbol.toUpperCase(), decimals);
}
function convertAmountToBaseUnit(num, decimals) {
  if (isMoney(num)) return num.amount.shiftedBy(-num.decimals);
  if (!isNumber(decimals)) throw new Error("Must define decimal of given currency");
  return num.shiftedBy(-decimals);
}
function subtractMoney(xAmount, yAmount) {
  if (xAmount.symbol !== yAmount.symbol) throw new Error("Cannot subtract different currencies");
  return createMoney(xAmount.amount.minus(yAmount.amount), xAmount.symbol, xAmount.decimals);
}
function sumMoney(moneysArr) {
  if (moneysArr.some((item) => item.symbol !== moneysArr[0].symbol))
    throw new Error("Cannot sum different currencies");
  const sum = moneysArr.reduce((acc, item) => acc.plus(item.amount), new BigNumber5(0));
  return createMoney(sum, moneysArr[0].symbol, moneysArr[0].decimals);
}

// src/money/is-valid-precision.ts
function isValidPrecision(amount, precision) {
  if (!isNumber(amount)) return false;
  return countDecimals(amount) <= precision;
}

// src/money/unit-conversion.ts
import { BTC_DECIMALS, STX_DECIMALS } from "@leather.io/constants";
function fractionalUnitToUnit(decimals) {
  return (unit) => {
    const unitBigNumber = initBigNumber(unit);
    return unitBigNumber.shiftedBy(-decimals);
  };
}
function unitToFractionalUnit(decimals) {
  return (unit) => {
    const unitBigNumber = initBigNumber(unit);
    return unitBigNumber.shiftedBy(decimals);
  };
}
var satToBtc = fractionalUnitToUnit(BTC_DECIMALS);
var btcToSat = unitToFractionalUnit(BTC_DECIMALS);
var microStxToStx = fractionalUnitToUnit(STX_DECIMALS);
var stxToMicroStx = unitToFractionalUnit(STX_DECIMALS);
function moneyToBaseUnit(sum) {
  return fractionalUnitToUnit(sum.decimals)(sum.amount);
}

// src/accounts/account-addresses.ts
function createAccountAddresses(accountId, btcDescriptors = [], stxAddress) {
  const accountAddresses = { id: accountId };
  const taprootDescriptor = btcDescriptors.find((desc) => desc.startsWith("tr("));
  const nativeSegwitDescriptor = btcDescriptors.find((desc) => desc.startsWith("wpkh("));
  if (taprootDescriptor && nativeSegwitDescriptor) {
    accountAddresses.bitcoin = {
      taprootDescriptor,
      nativeSegwitDescriptor
    };
  }
  if (stxAddress) {
    accountAddresses.stacks = { stxAddress };
  }
  return accountAddresses;
}
function hasBitcoinAddress(account) {
  return account.bitcoin !== void 0;
}
function hasStacksAddress(account) {
  return account.stacks !== void 0;
}

// src/assets/sort-assets.ts
function sortAssetsByName(assets) {
  return assets.sort((a, b) => {
    if (a.name < b.name) return -1;
    if (a.name > b.name) return 1;
    return 0;
  }).sort((a, b) => {
    if (a.name === "STX") return -1;
    if (b.name !== "STX") return 1;
    return 0;
  }).sort((a, b) => {
    if (a.name === "BTC") return -1;
    if (b.name !== "BTC") return 1;
    return 0;
  });
}
function migratePositiveAssetBalancesToTop(assets) {
  const assetsWithPositiveBalance = assets.filter((asset) => asset.balance.amount.isGreaterThan(0));
  const assetsWithZeroBalance = assets.filter((asset) => asset.balance.amount.isEqualTo(0));
  return [...assetsWithPositiveBalance, ...assetsWithZeroBalance];
}

// src/assets/asset-display-name.ts
function getAssetDisplayName(asset) {
  const { protocol } = asset;
  switch (protocol) {
    case "nativeBtc":
      return "bitcoin";
    case "nativeStx":
      return "stacks";
    case "brc20":
      return "brc-20";
    case "inscription":
      return "inscription";
    case "rune":
      return "rune";
    case "sip10":
      return asset.name;
    case "sip9":
      return asset.name;
    case "stamp":
      return "stamp";
    case "src20":
      return "src-20";
    case "stx20":
      return "stx-20";
    default:
      assertUnreachable(protocol);
  }
}

// src/assets/balance-helpers.ts
function createBaseCryptoAssetBalance(totalBalance, inboundBal, outboundBal) {
  const zeroBalance = createMoney(0, totalBalance.symbol);
  const inboundBalance = inboundBal ?? zeroBalance;
  const outboundBalance = outboundBal ?? zeroBalance;
  return {
    totalBalance,
    inboundBalance,
    outboundBalance,
    pendingBalance: subtractMoney(sumMoney([totalBalance, inboundBalance]), outboundBalance),
    availableBalance: subtractMoney(totalBalance, outboundBalance)
  };
}
function createBtcCryptoAssetBalance(totalBalance, inboundBal, outboundBal, protectedBal, uneconomicalBal, unspendableBal) {
  const zeroBalance = createMoney(0, totalBalance.symbol);
  const inboundBalance = inboundBal ?? zeroBalance;
  const outboundBalance = outboundBal ?? zeroBalance;
  const protectedBalance = protectedBal ?? zeroBalance;
  const uneconomicalBalance = uneconomicalBal ?? zeroBalance;
  const unspendableBalance = unspendableBal ?? zeroBalance;
  const baseBalance = createBaseCryptoAssetBalance(totalBalance, inboundBalance, outboundBalance);
  return {
    ...baseBalance,
    protectedBalance,
    uneconomicalBalance,
    availableBalance: subtractMoney(totalBalance, unspendableBalance),
    unspendableBalance
  };
}
function createStxCryptoAssetBalance(totalBalance, inboundBal, outboundBal, lockedBal) {
  const zeroBalance = createMoney(0, totalBalance.symbol);
  const inboundBalance = inboundBal ?? zeroBalance;
  const outboundBalance = outboundBal ?? zeroBalance;
  const lockedBalance = lockedBal ?? zeroBalance;
  const baseBalance = createBaseCryptoAssetBalance(totalBalance, inboundBalance, outboundBalance);
  const availableBalance = subtractMoney(totalBalance, outboundBalance);
  return {
    ...baseBalance,
    lockedBalance,
    unlockedBalance: subtractMoney(totalBalance, lockedBalance),
    availableBalance,
    availableUnlockedBalance: subtractMoney(availableBalance, lockedBalance)
  };
}
function aggregateBaseCryptoAssetBalances(balances) {
  return createBaseCryptoAssetBalance(
    sumMoney(balances.map((b) => b.totalBalance)),
    sumMoney(balances.map((b) => b.inboundBalance)),
    sumMoney(balances.map((b) => b.outboundBalance))
  );
}
function aggregateBtcCryptoAssetBalances(balances) {
  return createBtcCryptoAssetBalance(
    sumMoney(balances.map((b) => b.totalBalance)),
    sumMoney(balances.map((b) => b.inboundBalance)),
    sumMoney(balances.map((b) => b.outboundBalance)),
    sumMoney(balances.map((b) => b.protectedBalance)),
    sumMoney(balances.map((b) => b.uneconomicalBalance)),
    sumMoney(balances.map((b) => b.unspendableBalance))
  );
}
function aggregateStxCryptoAssetBalances(balances) {
  return createStxCryptoAssetBalance(
    sumMoney(balances.map((b) => b.totalBalance)),
    sumMoney(balances.map((b) => b.inboundBalance)),
    sumMoney(balances.map((b) => b.outboundBalance)),
    sumMoney(balances.map((b) => b.lockedBalance))
  );
}

// src/truncate-middle.ts
function truncateHex(hex, offset = 5) {
  return `${hex.substring(0, offset + 2)}\u2026${hex.substring(hex.length - offset)}`;
}
function truncateMiddle(input, offset = 5) {
  if (!input) return "";
  if (input.startsWith("0x")) {
    return truncateHex(input, offset);
  }
  if (input.includes(".")) {
    const parts = input.split(".");
    const start = parts[0]?.substring(0, offset);
    const end = parts[0]?.substring(parts[0].length - offset, parts[0].length);
    return `${start}\u2026${end}.${parts[1]}`;
  } else {
    const start = input?.substring(0, offset);
    const end = input?.substring(input.length - offset, input.length);
    return `${start}\u2026${end}`;
  }
}

// src/time.ts
var oneMinInMs = 60 * 1e3;
var fiveMinInMs = 5 * oneMinInMs;
var oneDayInMs = 24 * 60 * 60 * 1e3;
var oneWeekInMs = 7 * oneDayInMs;

// src/spam-filter/tlds-list.ts
var tlds = [
  "AAA",
  "AARP",
  "ABB",
  "ABBOTT",
  "ABBVIE",
  "ABC",
  "ABLE",
  "ABOGADO",
  "ABUDHABI",
  "AC",
  "ACADEMY",
  "ACCENTURE",
  "ACCOUNTANT",
  "ACCOUNTANTS",
  "ACO",
  "ACTOR",
  "AD",
  "ADS",
  "ADULT",
  "AE",
  "AEG",
  "AERO",
  "AETNA",
  "AF",
  "AFL",
  "AFRICA",
  "AG",
  "AGAKHAN",
  "AGENCY",
  "AI",
  "AIG",
  "AIRBUS",
  "AIRFORCE",
  "AIRTEL",
  "AKDN",
  "AL",
  "ALIBABA",
  "ALIPAY",
  "ALLFINANZ",
  "ALLSTATE",
  "ALLY",
  "ALSACE",
  "ALSTOM",
  "AM",
  "AMAZON",
  "AMERICANEXPRESS",
  "AMERICANFAMILY",
  "AMEX",
  "AMFAM",
  "AMICA",
  "AMSTERDAM",
  "ANALYTICS",
  "ANDROID",
  "ANQUAN",
  "ANZ",
  "AO",
  "AOL",
  "APARTMENTS",
  "APP",
  "APPLE",
  "AQ",
  "AQUARELLE",
  "AR",
  "ARAB",
  "ARAMCO",
  "ARCHI",
  "ARMY",
  "ARPA",
  "ART",
  "ARTE",
  "AS",
  "ASDA",
  "ASIA",
  "ASSOCIATES",
  "AT",
  "ATHLETA",
  "ATTORNEY",
  "AU",
  "AUCTION",
  "AUDI",
  "AUDIBLE",
  "AUDIO",
  "AUSPOST",
  "AUTHOR",
  "AUTO",
  "AUTOS",
  "AW",
  "AWS",
  "AX",
  "AXA",
  "AZ",
  "AZURE",
  "BA",
  "BABY",
  "BAIDU",
  "BANAMEX",
  "BAND",
  "BANK",
  "BAR",
  "BARCELONA",
  "BARCLAYCARD",
  "BARCLAYS",
  "BAREFOOT",
  "BARGAINS",
  "BASEBALL",
  "BASKETBALL",
  "BAUHAUS",
  "BAYERN",
  "BB",
  "BBC",
  "BBT",
  "BBVA",
  "BCG",
  "BCN",
  "BD",
  "BE",
  "BEATS",
  "BEAUTY",
  "BEER",
  "BENTLEY",
  "BERLIN",
  "BEST",
  "BESTBUY",
  "BET",
  "BF",
  "BG",
  "BH",
  "BHARTI",
  "BI",
  "BIBLE",
  "BID",
  "BIKE",
  "BING",
  "BINGO",
  "BIO",
  "BIZ",
  "BJ",
  "BLACK",
  "BLACKFRIDAY",
  "BLOCKBUSTER",
  "BLOG",
  "BLOOMBERG",
  "BLUE",
  "BM",
  "BMS",
  "BMW",
  "BN",
  "BNPPARIBAS",
  "BO",
  "BOATS",
  "BOEHRINGER",
  "BOFA",
  "BOM",
  "BOND",
  "BOO",
  "BOOK",
  "BOOKING",
  "BOSCH",
  "BOSTIK",
  "BOSTON",
  "BOT",
  "BOUTIQUE",
  "BOX",
  "BR",
  "BRADESCO",
  "BRIDGESTONE",
  "BROADWAY",
  "BROKER",
  "BROTHER",
  "BRUSSELS",
  "BS",
  "BT",
  "BUILD",
  "BUILDERS",
  "BUSINESS",
  "BUY",
  "BUZZ",
  "BV",
  "BW",
  "BY",
  "BZ",
  "BZH",
  "CA",
  "CAB",
  "CAFE",
  "CAL",
  "CALL",
  "CALVINKLEIN",
  "CAM",
  "CAMERA",
  "CAMP",
  "CANON",
  "CAPETOWN",
  "CAPITAL",
  "CAPITALONE",
  "CAR",
  "CARAVAN",
  "CARDS",
  "CARE",
  "CAREER",
  "CAREERS",
  "CARS",
  "CASA",
  "CASE",
  "CASH",
  "CASINO",
  "CAT",
  "CATERING",
  "CATHOLIC",
  "CBA",
  "CBN",
  "CBRE",
  "CC",
  "CD",
  "CENTER",
  "CEO",
  "CERN",
  "CF",
  "CFA",
  "CFD",
  "CG",
  "CH",
  "CHANEL",
  "CHANNEL",
  "CHARITY",
  "CHASE",
  "CHAT",
  "CHEAP",
  "CHINTAI",
  "CHRISTMAS",
  "CHROME",
  "CHURCH",
  "CI",
  "CIPRIANI",
  "CIRCLE",
  "CISCO",
  "CITADEL",
  "CITI",
  "CITIC",
  "CITY",
  "CK",
  "CL",
  "CLAIMS",
  "CLEANING",
  "CLICK",
  "CLINIC",
  "CLINIQUE",
  "CLOTHING",
  "CLOUD",
  "CLUB",
  "CLUBMED",
  "CM",
  "CN",
  "CO",
  "COACH",
  "CODES",
  "COFFEE",
  "COLLEGE",
  "COLOGNE",
  "COM",
  "COMMBANK",
  "COMMUNITY",
  "COMPANY",
  "COMPARE",
  "COMPUTER",
  "COMSEC",
  "CONDOS",
  "CONSTRUCTION",
  "CONSULTING",
  "CONTACT",
  "CONTRACTORS",
  "COOKING",
  "COOL",
  "COOP",
  "CORSICA",
  "COUNTRY",
  "COUPON",
  "COUPONS",
  "COURSES",
  "CPA",
  "CR",
  "CREDIT",
  "CREDITCARD",
  "CREDITUNION",
  "CRICKET",
  "CROWN",
  "CRS",
  "CRUISE",
  "CRUISES",
  "CU",
  "CUISINELLA",
  "CV",
  "CW",
  "CX",
  "CY",
  "CYMRU",
  "CYOU",
  "CZ",
  "DAD",
  "DANCE",
  "DATA",
  "DATE",
  "DATING",
  "DATSUN",
  "DAY",
  "DCLK",
  "DDS",
  "DE",
  "DEAL",
  "DEALER",
  "DEALS",
  "DEGREE",
  "DELIVERY",
  "DELL",
  "DELOITTE",
  "DELTA",
  "DEMOCRAT",
  "DENTAL",
  "DENTIST",
  "DESI",
  "DESIGN",
  "DEV",
  "DHL",
  "DIAMONDS",
  "DIET",
  "DIGITAL",
  "DIRECT",
  "DIRECTORY",
  "DISCOUNT",
  "DISCOVER",
  "DISH",
  "DIY",
  "DJ",
  "DK",
  "DM",
  "DNP",
  "DO",
  "DOCS",
  "DOCTOR",
  "DOG",
  "DOMAINS",
  "DOT",
  "DOWNLOAD",
  "DRIVE",
  "DTV",
  "DUBAI",
  "DUNLOP",
  "DUPONT",
  "DURBAN",
  "DVAG",
  "DVR",
  "DZ",
  "EARTH",
  "EAT",
  "EC",
  "ECO",
  "EDEKA",
  "EDU",
  "EDUCATION",
  "EE",
  "EG",
  "EMAIL",
  "EMERCK",
  "ENERGY",
  "ENGINEER",
  "ENGINEERING",
  "ENTERPRISES",
  "EPSON",
  "EQUIPMENT",
  "ER",
  "ERICSSON",
  "ERNI",
  "ES",
  "ESQ",
  "ESTATE",
  "ET",
  "EU",
  "EUROVISION",
  "EUS",
  "EVENTS",
  "EXCHANGE",
  "EXPERT",
  "EXPOSED",
  "EXPRESS",
  "EXTRASPACE",
  "FAGE",
  "FAIL",
  "FAIRWINDS",
  "FAITH",
  "FAMILY",
  "FAN",
  "FANS",
  "FARM",
  "FARMERS",
  "FASHION",
  "FAST",
  "FEDEX",
  "FEEDBACK",
  "FERRARI",
  "FERRERO",
  "FI",
  "FIDELITY",
  "FIDO",
  "FILM",
  "FINAL",
  "FINANCE",
  "FINANCIAL",
  "FIRE",
  "FIRESTONE",
  "FIRMDALE",
  "FISH",
  "FISHING",
  "FIT",
  "FITNESS",
  "FJ",
  "FK",
  "FLICKR",
  "FLIGHTS",
  "FLIR",
  "FLORIST",
  "FLOWERS",
  "FLY",
  "FM",
  "FO",
  "FOO",
  "FOOD",
  "FOOTBALL",
  "FORD",
  "FOREX",
  "FORSALE",
  "FORUM",
  "FOUNDATION",
  "FOX",
  "FR",
  "FREE",
  "FRESENIUS",
  "FRL",
  "FROGANS",
  "FRONTIER",
  "FTR",
  "FUJITSU",
  "FUN",
  "FUND",
  "FURNITURE",
  "FUTBOL",
  "FYI",
  "GA",
  "GAL",
  "GALLERY",
  "GALLO",
  "GALLUP",
  "GAME",
  "GAMES",
  "GAP",
  "GARDEN",
  "GAY",
  "GB",
  "GBIZ",
  "GD",
  "GDN",
  "GE",
  "GEA",
  "GENT",
  "GENTING",
  "GEORGE",
  "GF",
  "GG",
  "GGEE",
  "GH",
  "GI",
  "GIFT",
  "GIFTS",
  "GIVES",
  "GIVING",
  "GL",
  "GLASS",
  "GLE",
  "GLOBAL",
  "GLOBO",
  "GM",
  "GMAIL",
  "GMBH",
  "GMO",
  "GMX",
  "GN",
  "GODADDY",
  "GOLD",
  "GOLDPOINT",
  "GOLF",
  "GOO",
  "GOODYEAR",
  "GOOG",
  "GOOGLE",
  "GOP",
  "GOT",
  "GOV",
  "GP",
  "GQ",
  "GR",
  "GRAINGER",
  "GRAPHICS",
  "GRATIS",
  "GREEN",
  "GRIPE",
  "GROCERY",
  "GROUP",
  "GS",
  "GT",
  "GU",
  "GUCCI",
  "GUGE",
  "GUIDE",
  "GUITARS",
  "GURU",
  "GW",
  "GY",
  "HAIR",
  "HAMBURG",
  "HANGOUT",
  "HAUS",
  "HBO",
  "HDFC",
  "HDFCBANK",
  "HEALTH",
  "HEALTHCARE",
  "HELP",
  "HELSINKI",
  "HERE",
  "HERMES",
  "HIPHOP",
  "HISAMITSU",
  "HITACHI",
  "HIV",
  "HK",
  "HKT",
  "HM",
  "HN",
  "HOCKEY",
  "HOLDINGS",
  "HOLIDAY",
  "HOMEDEPOT",
  "HOMEGOODS",
  "HOMES",
  "HOMESENSE",
  "HONDA",
  "HORSE",
  "HOSPITAL",
  "HOST",
  "HOSTING",
  "HOT",
  "HOTELS",
  "HOTMAIL",
  "HOUSE",
  "HOW",
  "HR",
  "HSBC",
  "HT",
  "HU",
  "HUGHES",
  "HYATT",
  "HYUNDAI",
  "IBM",
  "ICBC",
  "ICE",
  "ICU",
  "ID",
  "IE",
  "IEEE",
  "IFM",
  "IKANO",
  "IL",
  "IM",
  "IMAMAT",
  "IMDB",
  "IMMO",
  "IMMOBILIEN",
  "IN",
  "INC",
  "INDUSTRIES",
  "INFINITI",
  "INFO",
  "ING",
  "INK",
  "INSTITUTE",
  "INSURANCE",
  "INSURE",
  "INT",
  "INTERNATIONAL",
  "INTUIT",
  "INVESTMENTS",
  "IO",
  "IPIRANGA",
  "IQ",
  "IR",
  "IRISH",
  "IS",
  "ISMAILI",
  "IST",
  "ISTANBUL",
  "IT",
  "ITAU",
  "ITV",
  "JAGUAR",
  "JAVA",
  "JCB",
  "JE",
  "JEEP",
  "JETZT",
  "JEWELRY",
  "JIO",
  "JLL",
  "JM",
  "JMP",
  "JNJ",
  "JO",
  "JOBS",
  "JOBURG",
  "JOT",
  "JOY",
  "JP",
  "JPMORGAN",
  "JPRS",
  "JUEGOS",
  "JUNIPER",
  "KAUFEN",
  "KDDI",
  "KE",
  "KERRYHOTELS",
  "KERRYLOGISTICS",
  "KERRYPROPERTIES",
  "KFH",
  "KG",
  "KH",
  "KI",
  "KIA",
  "KIDS",
  "KIM",
  "KINDLE",
  "KITCHEN",
  "KIWI",
  "KM",
  "KN",
  "KOELN",
  "KOMATSU",
  "KOSHER",
  "KP",
  "KPMG",
  "KPN",
  "KR",
  "KRD",
  "KRED",
  "KUOKGROUP",
  "KW",
  "KY",
  "KYOTO",
  "KZ",
  "LA",
  "LACAIXA",
  "LAMBORGHINI",
  "LAMER",
  "LANCASTER",
  "LAND",
  "LANDROVER",
  "LANXESS",
  "LASALLE",
  "LAT",
  "LATINO",
  "LATROBE",
  "LAW",
  "LAWYER",
  "LB",
  "LC",
  "LDS",
  "LEASE",
  "LECLERC",
  "LEFRAK",
  "LEGAL",
  "LEGO",
  "LEXUS",
  "LGBT",
  "LI",
  "LIDL",
  "LIFE",
  "LIFEINSURANCE",
  "LIFESTYLE",
  "LIGHTING",
  "LIKE",
  "LILLY",
  "LIMITED",
  "LIMO",
  "LINCOLN",
  "LINK",
  "LIPSY",
  "LIVE",
  "LIVING",
  "LK",
  "LLC",
  "LLP",
  "LOAN",
  "LOANS",
  "LOCKER",
  "LOCUS",
  "LOL",
  "LONDON",
  "LOTTE",
  "LOTTO",
  "LOVE",
  "LPL",
  "LPLFINANCIAL",
  "LR",
  "LS",
  "LT",
  "LTD",
  "LTDA",
  "LU",
  "LUNDBECK",
  "LUXE",
  "LUXURY",
  "LV",
  "LY",
  "MA",
  "MADRID",
  "MAIF",
  "MAISON",
  "MAKEUP",
  "MAN",
  "MANAGEMENT",
  "MANGO",
  "MAP",
  "MARKET",
  "MARKETING",
  "MARKETS",
  "MARRIOTT",
  "MARSHALLS",
  "MATTEL",
  "MBA",
  "MC",
  "MCKINSEY",
  "MD",
  "ME",
  "MED",
  "MEDIA",
  "MEET",
  "MELBOURNE",
  "MEME",
  "MEMORIAL",
  "MEN",
  "MENU",
  "MERCKMSD",
  "MG",
  "MH",
  "MIAMI",
  "MICROSOFT",
  "MIL",
  "MINI",
  "MINT",
  "MIT",
  "MITSUBISHI",
  "MK",
  "ML",
  "MLB",
  "MLS",
  "MM",
  "MMA",
  "MN",
  "MO",
  "MOBI",
  "MOBILE",
  "MODA",
  "MOE",
  "MOI",
  "MOM",
  "MONASH",
  "MONEY",
  "MONSTER",
  "MORMON",
  "MORTGAGE",
  "MOSCOW",
  "MOTO",
  "MOTORCYCLES",
  "MOV",
  "MOVIE",
  "MP",
  "MQ",
  "MR",
  "MS",
  "MSD",
  "MT",
  "MTN",
  "MTR",
  "MU",
  "MUSEUM",
  "MUSIC",
  "MV",
  "MW",
  "MX",
  "MY",
  "MZ",
  "NA",
  "NAB",
  "NAGOYA",
  "NAME",
  "NAVY",
  "NBA",
  "NC",
  "NE",
  "NEC",
  "NET",
  "NETBANK",
  "NETFLIX",
  "NETWORK",
  "NEUSTAR",
  "NEW",
  "NEWS",
  "NEXT",
  "NEXTDIRECT",
  "NEXUS",
  "NF",
  "NFL",
  "NG",
  "NGO",
  "NHK",
  "NI",
  "NICO",
  "NIKE",
  "NIKON",
  "NINJA",
  "NISSAN",
  "NISSAY",
  "NL",
  "NO",
  "NOKIA",
  "NORTON",
  "NOW",
  "NOWRUZ",
  "NOWTV",
  "NP",
  "NR",
  "NRA",
  "NRW",
  "NTT",
  "NU",
  "NYC",
  "NZ",
  "OBI",
  "OBSERVER",
  "OFFICE",
  "OKINAWA",
  "OLAYAN",
  "OLAYANGROUP",
  "OLLO",
  "OM",
  "OMEGA",
  "ONE",
  "ONG",
  "ONL",
  "ONLINE",
  "OOO",
  "OPEN",
  "ORACLE",
  "ORANGE",
  "ORG",
  "ORGANIC",
  "ORIGINS",
  "OSAKA",
  "OTSUKA",
  "OTT",
  "OVH",
  "PA",
  "PAGE",
  "PANASONIC",
  "PARIS",
  "PARS",
  "PARTNERS",
  "PARTS",
  "PARTY",
  "PAY",
  "PCCW",
  "PE",
  "PET",
  "PF",
  "PFIZER",
  "PG",
  "PH",
  "PHARMACY",
  "PHD",
  "PHILIPS",
  "PHONE",
  "PHOTO",
  "PHOTOGRAPHY",
  "PHOTOS",
  "PHYSIO",
  "PICS",
  "PICTET",
  "PICTURES",
  "PID",
  "PIN",
  "PING",
  "PINK",
  "PIONEER",
  "PIZZA",
  "PK",
  "PL",
  "PLACE",
  "PLAY",
  "PLAYSTATION",
  "PLUMBING",
  "PLUS",
  "PM",
  "PN",
  "PNC",
  "POHL",
  "POKER",
  "POLITIE",
  "PORN",
  "POST",
  "PR",
  "PRAMERICA",
  "PRAXI",
  "PRESS",
  "PRIME",
  "PRO",
  "PROD",
  "PRODUCTIONS",
  "PROF",
  "PROGRESSIVE",
  "PROMO",
  "PROPERTIES",
  "PROPERTY",
  "PROTECTION",
  "PRU",
  "PRUDENTIAL",
  "PS",
  "PT",
  "PUB",
  "PW",
  "PWC",
  "PY",
  "QA",
  "QPON",
  "QUEBEC",
  "QUEST",
  "RACING",
  "RADIO",
  "RE",
  "READ",
  "REALESTATE",
  "REALTOR",
  "REALTY",
  "RECIPES",
  "RED",
  "REDSTONE",
  "REDUMBRELLA",
  "REHAB",
  "REISE",
  "REISEN",
  "REIT",
  "RELIANCE",
  "REN",
  "RENT",
  "RENTALS",
  "REPAIR",
  "REPORT",
  "REPUBLICAN",
  "REST",
  "RESTAURANT",
  "REVIEW",
  "REVIEWS",
  "REXROTH",
  "RICH",
  "RICHARDLI",
  "RICOH",
  "RIL",
  "RIO",
  "RIP",
  "RO",
  "ROCKS",
  "RODEO",
  "ROGERS",
  "ROOM",
  "RS",
  "RSVP",
  "RU",
  "RUGBY",
  "RUHR",
  "RUN",
  "RW",
  "RWE",
  "RYUKYU",
  "SA",
  "SAARLAND",
  "SAFE",
  "SAFETY",
  "SAKURA",
  "SALE",
  "SALON",
  "SAMSCLUB",
  "SAMSUNG",
  "SANDVIK",
  "SANDVIKCOROMANT",
  "SANOFI",
  "SAP",
  "SARL",
  "SAS",
  "SAVE",
  "SAXO",
  "SB",
  "SBI",
  "SBS",
  "SC",
  "SCB",
  "SCHAEFFLER",
  "SCHMIDT",
  "SCHOLARSHIPS",
  "SCHOOL",
  "SCHULE",
  "SCHWARZ",
  "SCIENCE",
  "SCOT",
  "SD",
  "SE",
  "SEARCH",
  "SEAT",
  "SECURE",
  "SECURITY",
  "SEEK",
  "SELECT",
  "SENER",
  "SERVICES",
  "SEVEN",
  "SEW",
  "SEX",
  "SEXY",
  "SFR",
  "SG",
  "SH",
  "SHANGRILA",
  "SHARP",
  "SHELL",
  "SHIA",
  "SHIKSHA",
  "SHOES",
  "SHOP",
  "SHOPPING",
  "SHOUJI",
  "SHOW",
  "SI",
  "SILK",
  "SINA",
  "SINGLES",
  "SITE",
  "SJ",
  "SK",
  "SKI",
  "SKIN",
  "SKY",
  "SKYPE",
  "SL",
  "SLING",
  "SM",
  "SMART",
  "SMILE",
  "SN",
  "SNCF",
  "SO",
  "SOCCER",
  "SOCIAL",
  "SOFTBANK",
  "SOFTWARE",
  "SOHU",
  "SOLAR",
  "SOLUTIONS",
  "SONG",
  "SONY",
  "SOY",
  "SPA",
  "SPACE",
  "SPORT",
  "SPOT",
  "SR",
  "SRL",
  "SS",
  "ST",
  "STADA",
  "STAPLES",
  "STAR",
  "STATEBANK",
  "STATEFARM",
  "STC",
  "STCGROUP",
  "STOCKHOLM",
  "STORAGE",
  "STORE",
  "STREAM",
  "STUDIO",
  "STUDY",
  "STYLE",
  "SU",
  "SUCKS",
  "SUPPLIES",
  "SUPPLY",
  "SUPPORT",
  "SURF",
  "SURGERY",
  "SUZUKI",
  "SV",
  "SWATCH",
  "SWISS",
  "SX",
  "SY",
  "SYDNEY",
  "SYSTEMS",
  "SZ",
  "TAB",
  "TAIPEI",
  "TALK",
  "TAOBAO",
  "TARGET",
  "TATAMOTORS",
  "TATAR",
  "TATTOO",
  "TAX",
  "TAXI",
  "TC",
  "TCI",
  "TD",
  "TDK",
  "TEAM",
  "TECH",
  "TECHNOLOGY",
  "TEL",
  "TEMASEK",
  "TENNIS",
  "TEVA",
  "TF",
  "TG",
  "TH",
  "THD",
  "THEATER",
  "THEATRE",
  "TIAA",
  "TICKETS",
  "TIENDA",
  "TIPS",
  "TIRES",
  "TIROL",
  "TJ",
  "TJMAXX",
  "TJX",
  "TK",
  "TKMAXX",
  "TL",
  "TM",
  "TMALL",
  "TN",
  "TO",
  "TODAY",
  "TOKYO",
  "TOOLS",
  "TOP",
  "TORAY",
  "TOSHIBA",
  "TOTAL",
  "TOURS",
  "TOWN",
  "TOYOTA",
  "TOYS",
  "TR",
  "TRADE",
  "TRADING",
  "TRAINING",
  "TRAVEL",
  "TRAVELERS",
  "TRAVELERSINSURANCE",
  "TRUST",
  "TRV",
  "TT",
  "TUBE",
  "TUI",
  "TUNES",
  "TUSHU",
  "TV",
  "TVS",
  "TW",
  "TZ",
  "UA",
  "UBANK",
  "UBS",
  "UG",
  "UK",
  "UNICOM",
  "UNIVERSITY",
  "UNO",
  "UOL",
  "UPS",
  "US",
  "UY",
  "UZ",
  "VA",
  "VACATIONS",
  "VANA",
  "VANGUARD",
  "VC",
  "VE",
  "VEGAS",
  "VENTURES",
  "VERISIGN",
  "VERSICHERUNG",
  "VET",
  "VG",
  "VI",
  "VIAJES",
  "VIDEO",
  "VIG",
  "VIKING",
  "VILLAS",
  "VIN",
  "VIP",
  "VIRGIN",
  "VISA",
  "VISION",
  "VIVA",
  "VIVO",
  "VLAANDEREN",
  "VN",
  "VODKA",
  "VOLVO",
  "VOTE",
  "VOTING",
  "VOTO",
  "VOYAGE",
  "VU",
  "WALES",
  "WALMART",
  "WALTER",
  "WANG",
  "WANGGOU",
  "WATCH",
  "WATCHES",
  "WEATHER",
  "WEATHERCHANNEL",
  "WEBCAM",
  "WEBER",
  "WEBSITE",
  "WED",
  "WEDDING",
  "WEIBO",
  "WEIR",
  "WF",
  "WHOSWHO",
  "WIEN",
  "WIKI",
  "WILLIAMHILL",
  "WIN",
  "WINDOWS",
  "WINE",
  "WINNERS",
  "WME",
  "WOLTERSKLUWER",
  "WOODSIDE",
  "WORK",
  "WORKS",
  "WORLD",
  "WOW",
  "WS",
  "WTC",
  "WTF",
  "XBOX",
  "XEROX",
  "XIHUAN",
  "XIN",
  "XN--11B4C3D",
  "XN--1CK2E1B",
  "XN--1QQW23A",
  "XN--2SCRJ9C",
  "XN--30RR7Y",
  "XN--3BST00M",
  "XN--3DS443G",
  "XN--3E0B707E",
  "XN--3HCRJ9C",
  "XN--3PXU8K",
  "XN--42C2D9A",
  "XN--45BR5CYL",
  "XN--45BRJ9C",
  "XN--45Q11C",
  "XN--4DBRK0CE",
  "XN--4GBRIM",
  "XN--54B7FTA0CC",
  "XN--55QW42G",
  "XN--55QX5D",
  "XN--5SU34J936BGSG",
  "XN--5TZM5G",
  "XN--6FRZ82G",
  "XN--6QQ986B3XL",
  "XN--80ADXHKS",
  "XN--80AO21A",
  "XN--80AQECDR1A",
  "XN--80ASEHDB",
  "XN--80ASWG",
  "XN--8Y0A063A",
  "XN--90A3AC",
  "XN--90AE",
  "XN--90AIS",
  "XN--9DBQ2A",
  "XN--9ET52U",
  "XN--9KRT00A",
  "XN--B4W605FERD",
  "XN--BCK1B9A5DRE4C",
  "XN--C1AVG",
  "XN--C2BR7G",
  "XN--CCK2B3B",
  "XN--CCKWCXETD",
  "XN--CG4BKI",
  "XN--CLCHC0EA0B2G2A9GCD",
  "XN--CZR694B",
  "XN--CZRS0T",
  "XN--CZRU2D",
  "XN--D1ACJ3B",
  "XN--D1ALF",
  "XN--E1A4C",
  "XN--ECKVDTC9D",
  "XN--EFVY88H",
  "XN--FCT429K",
  "XN--FHBEI",
  "XN--FIQ228C5HS",
  "XN--FIQ64B",
  "XN--FIQS8S",
  "XN--FIQZ9S",
  "XN--FJQ720A",
  "XN--FLW351E",
  "XN--FPCRJ9C3D",
  "XN--FZC2C9E2C",
  "XN--FZYS8D69UVGM",
  "XN--G2XX48C",
  "XN--GCKR3F0F",
  "XN--GECRJ9C",
  "XN--GK3AT1E",
  "XN--H2BREG3EVE",
  "XN--H2BRJ9C",
  "XN--H2BRJ9C8C",
  "XN--HXT814E",
  "XN--I1B6B1A6A2E",
  "XN--IMR513N",
  "XN--IO0A7I",
  "XN--J1AEF",
  "XN--J1AMH",
  "XN--J6W193G",
  "XN--JLQ480N2RG",
  "XN--JVR189M",
  "XN--KCRX77D1X4A",
  "XN--KPRW13D",
  "XN--KPRY57D",
  "XN--KPUT3I",
  "XN--L1ACC",
  "XN--LGBBAT1AD8J",
  "XN--MGB9AWBF",
  "XN--MGBA3A3EJT",
  "XN--MGBA3A4F16A",
  "XN--MGBA7C0BBN0A",
  "XN--MGBAAM7A8H",
  "XN--MGBAB2BD",
  "XN--MGBAH1A3HJKRD",
  "XN--MGBAI9AZGQP6J",
  "XN--MGBAYH7GPA",
  "XN--MGBBH1A",
  "XN--MGBBH1A71E",
  "XN--MGBC0A9AZCG",
  "XN--MGBCA7DZDO",
  "XN--MGBCPQ6GPA1A",
  "XN--MGBERP4A5D4AR",
  "XN--MGBGU82A",
  "XN--MGBI4ECEXP",
  "XN--MGBPL2FH",
  "XN--MGBT3DHD",
  "XN--MGBTX2B",
  "XN--MGBX4CD0AB",
  "XN--MIX891F",
  "XN--MK1BU44C",
  "XN--MXTQ1M",
  "XN--NGBC5AZD",
  "XN--NGBE9E0A",
  "XN--NGBRX",
  "XN--NODE",
  "XN--NQV7F",
  "XN--NQV7FS00EMA",
  "XN--NYQY26A",
  "XN--O3CW4H",
  "XN--OGBPF8FL",
  "XN--OTU796D",
  "XN--P1ACF",
  "XN--P1AI",
  "XN--PGBS0DH",
  "XN--PSSY2U",
  "XN--Q7CE6A",
  "XN--Q9JYB4C",
  "XN--QCKA1PMC",
  "XN--QXA6A",
  "XN--QXAM",
  "XN--RHQV96G",
  "XN--ROVU88B",
  "XN--RVC1E0AM3E",
  "XN--S9BRJ9C",
  "XN--SES554G",
  "XN--T60B56A",
  "XN--TCKWE",
  "XN--TIQ49XQYJ",
  "XN--UNUP4Y",
  "XN--VERMGENSBERATER-CTB",
  "XN--VERMGENSBERATUNG-PWB",
  "XN--VHQUV",
  "XN--VUQ861B",
  "XN--W4R85EL8FHU5DNRA",
  "XN--W4RS40L",
  "XN--WGBH1C",
  "XN--WGBL6A",
  "XN--XHQ521B",
  "XN--XKC2AL3HYE2A",
  "XN--XKC2DL3A5EE0H",
  "XN--Y9A3AQ",
  "XN--YFRO4I67O",
  "XN--YGBI2AMMX",
  "XN--ZFR164B",
  "XXX",
  "XYZ",
  "YACHTS",
  "YAHOO",
  "YAMAXUN",
  "YANDEX",
  "YE",
  "YODOBASHI",
  "YOGA",
  "YOKOHAMA",
  "YOU",
  "YOUTUBE",
  "YT",
  "YUN",
  "ZA",
  "ZAPPOS",
  "ZARA",
  "ZERO",
  "ZIP",
  "ZM",
  "ZONE",
  "ZUERICH",
  "ZW"
];

// src/spam-filter/spam-filter.ts
var tldRegex = tlds.join("|");
var urlRegex = new RegExp(`\\b.*\\s*\\.\\s*(${tldRegex})\\b`, "gi");
var spamWords = ["won", "win", "click"];
var spamReplacement = "Suspicious token";
function spamUrlFilter(input) {
  return input.match(urlRegex);
}
function spamWordFilter(input) {
  function containsSpam(element) {
    return input.toLowerCase().includes(element);
  }
  return spamWords.some(containsSpam);
}
function spamFilter({ input, whitelist }) {
  if (whitelist.includes(input)) return input;
  const urlFound = spamUrlFilter(input);
  const spamWordsFound = spamWordFilter(input);
  if (urlFound || spamWordsFound) {
    return spamReplacement;
  }
  return input;
}

// src/extract-phrase-from-string/extract-phrase-from-string.ts
function extractPhraseFromString(value) {
  const clean = value.trim();
  const words = clean.match(/\S+/g);
  if (words?.length) {
    return words.map((word) => word.match(/[^0-9]+/g) ? word : null).filter(Boolean).join(" ");
  } else {
    return clean;
  }
}

// src/px-string-to-number/px-string-to-number.ts
function pxStringToNumber(pxString) {
  if (!/^\d+px$/.test(pxString)) {
    throw new Error("Invalid pixel string format");
  }
  return +pxString.replace("px", "");
}

// src/abbreviate-number/abbreviate-number.ts
function abbreviateNumber(n) {
  if (n < 1e3) return n.toString();
  if (n >= 1e3 && n < 1e6) return +(n / 1e3).toFixed(2) + "K";
  if (n >= 1e6 && n < 1e9) return +(n / 1e6).toFixed(2) + "M";
  if (n >= 1e9 && n < 1e12) return +(n / 1e9).toFixed(2) + "B";
  if (n >= 1e12) return +(n / 1e12).toFixed(2) + "T";
  return n.toString();
}

// src/money/format-balance/remove-commas.ts
function removeCommas(amountWithCommas) {
  if (typeof amountWithCommas !== "string") {
    throw new Error("Amount with commas must be a string");
  }
  return amountWithCommas.replace(/,/g, "");
}

// src/money/format-balance/format-balance.ts
function formatBalance(amount) {
  if (typeof amount !== "string" || amount.trim() === "" || isNaN(Number(removeCommas(amount)))) {
    throw new Error("Invalid input: amount must be a non-empty string representing a valid number");
  }
  const noCommas = removeCommas(amount);
  const number = parseFloat(noCommas);
  return number > 1e4 ? {
    isAbbreviated: true,
    value: abbreviateNumber(number)
  } : { isAbbreviated: false, value: amount };
}

// src/index.ts
function isNumber(value) {
  return typeof value === "number";
}
function isString(value) {
  return typeof value === "string";
}
function isEmptyString(value) {
  return isString(value) && value === "";
}
function isBigInt(value) {
  return typeof value === "bigint";
}
function isUndefined(value) {
  return typeof value === "undefined";
}
function isFunction(value) {
  return typeof value === "function";
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function isObject(value) {
  return typeof value === "object";
}
function isError(value) {
  return value instanceof Error;
}
function isEmpty(value) {
  return Object.keys(value).length === 0;
}
function isDefined(argument) {
  return !isUndefined(argument);
}
function isTypedArray(val) {
  const TypedArray = Object.getPrototypeOf(Uint8Array);
  return val instanceof TypedArray;
}
function noop() {
}
function ensureArray(value) {
  return Array.isArray(value) ? value : [value];
}
function undefinedIfLengthZero(arr) {
  return arr.length ? arr : void 0;
}
function whenNetwork(mode) {
  return (networkMap) => networkMap[mode];
}
function isEmptyArray(data) {
  return data.length === 0;
}
var defaultWalletKeyId = "default";
function reverseBytes(bytes) {
  if (Buffer.isBuffer(bytes)) return Buffer.from(bytes).reverse();
  return new Uint8Array(bytes.slice().reverse());
}
function makeNumberRange(num) {
  return [...Array(num).keys()];
}
function createNumArrayOfRange(fromIndex, toIndex) {
  const result = [];
  for (let i = fromIndex; i <= toIndex; i++) {
    result.push(i);
  }
  return result;
}
async function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
function sumNumbers(nums) {
  return nums.reduce((acc, num) => acc.plus(num), new BigNumber6(0));
}
function isFulfilled(p) {
  return p.status === "fulfilled";
}
function isRejected(p) {
  return p.status === "rejected";
}
function createNullArrayOfLength(length) {
  return new Array(length).fill(null);
}
function safelyFormatHexTxid(id) {
  const prefix = "0x";
  if (id.startsWith(prefix)) return id;
  return prefix + id;
}
function kebabCase(str) {
  return str.replace(KEBAB_REGEX, (match2) => "-" + match2.toLowerCase());
}
function getLetters(string, offset = 1) {
  return string.slice(0, offset);
}
function getTicker(value) {
  let name = kebabCase(value);
  if (name.includes("-")) {
    const words = name.split("-");
    if (words.length >= 3) {
      name = `${getLetters(words[0])}${getLetters(words[1])}${getLetters(words[2])}`;
    } else {
      name = `${getLetters(words[0])}${getLetters(words[1], 2)}`;
    }
  } else if (name.length >= 3) {
    name = `${getLetters(name, 3)}`;
  }
  return name.toUpperCase();
}
function propIfDefined(prop, value) {
  return isBoolean(value) ? { [prop]: value } : {};
}
function isHexString(value) {
  return /^[0-9a-fA-F]+$/.test(value);
}
function toHexString(value) {
  return value.toString(16);
}
function hexToNumber(hex) {
  return parseInt(hex, 16);
}
function mapObject(obj, mapFn) {
  const result = {};
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      result[key] = mapFn(obj[key], key);
    }
  }
  return result;
}
function assertIsTruthy(val) {
  if (!val) throw new Error(`expected: true, actual: ${val}`);
}
function assertUnreachable(value) {
  throw new Error(`Unexpected value: ${JSON.stringify(value)}`);
}
function capitalize(val) {
  return val.charAt(0).toUpperCase() + val.slice(1);
}
function uniqueArray(arr) {
  return Array.from(new Set(arr));
}
function match() {
  return function matchVariant(variant, match2) {
    return match2[variant];
  };
}
function removeTrailingNullCharacters(s) {
  return s.replace(/\0*$/g, "");
}
function isNumberOrNumberList(value) {
  if (Array.isArray(value)) return value.every((item) => isNumber(item));
  return isNumber(value);
}
export {
  abbreviateNumber,
  aggregateBaseCryptoAssetBalances,
  aggregateBtcCryptoAssetBalances,
  aggregateStxCryptoAssetBalances,
  assertIsTruthy,
  assertUnreachable,
  baseCurrencyAmountInQuote,
  baseCurrencyAmountInQuoteWithFallback,
  btcToSat,
  calculateMeanAverage,
  capitalize,
  convertAmountToBaseUnit,
  convertAmountToFractionalUnit,
  convertToMoneyTypeWithDefaultOfZero,
  countDecimals,
  createAccountAddresses,
  createBaseCryptoAssetBalance,
  createBtcCryptoAssetBalance,
  createCounter,
  createMoney,
  createMoneyFromDecimal,
  createNullArrayOfLength,
  createNumArrayOfRange,
  createStxCryptoAssetBalance,
  defaultWalletKeyId,
  delay,
  ensureArray,
  extractPhraseFromString,
  fibonacciGenerator,
  fiveMinInMs,
  formatBalance,
  formatDustUsdAmounts,
  formatMoney,
  formatMoneyPadded,
  formatMoneyToFixedDecimal,
  formatMoneyToFixedDecimalWithoutSymbol,
  formatMoneyWithoutSymbol,
  getAssetDisplayName,
  getTicker,
  hasBitcoinAddress,
  hasStacksAddress,
  hexToNumber,
  i18nFormatCurrency,
  increaseValueByOneMicroStx,
  initBigNumber,
  isBigInt,
  isBoolean,
  isDefined,
  isEmpty,
  isEmptyArray,
  isEmptyString,
  isError,
  isEven,
  isFulfilled,
  isFunction,
  isHexString,
  isMoney,
  isMoneyGreaterThanZero,
  isNumber,
  isNumberOrNumberList,
  isObject,
  isRejected,
  isString,
  isTypedArray,
  isUndefined,
  isValidPrecision,
  makeNumberRange,
  mapObject,
  match,
  microStxToStx,
  migratePositiveAssetBalancesToTop,
  moneyToBaseUnit,
  noop,
  oneDayInMs,
  oneMinInMs,
  oneWeekInMs,
  propIfDefined,
  pxStringToNumber,
  removeTrailingNullCharacters,
  reverseBytes,
  safelyFormatHexTxid,
  satToBtc,
  sortAssetsByName,
  spamFilter,
  stxToMicroStx,
  subtractMoney,
  sumMoney,
  sumNumbers,
  toHexString,
  truncateMiddle,
  undefinedIfLengthZero,
  uniqueArray,
  unitToFractionalUnit,
  whenNetwork
};
//# sourceMappingURL=index.js.map