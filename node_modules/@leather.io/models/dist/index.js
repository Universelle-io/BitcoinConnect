// src/crypto-assets/crypto-asset-info.model.ts
var CryptoAssetChains = {
  bitcoin: "bitcoin",
  stacks: "stacks"
};
var CryptoAssetCategories = {
  fungible: "fungible",
  nft: "nft"
};
var CryptoAssetProtocols = {
  nativeBtc: "nativeBtc",
  nativeStx: "nativeStx",
  sip10: "sip10",
  brc20: "brc20",
  src20: "src20",
  stx20: "stx20",
  rune: "rune",
  stamp: "stamp",
  sip9: "sip9",
  inscription: "inscription"
};

// src/network/network.model.ts
var HIRO_API_BASE_URL_MAINNET = "https://api.hiro.so";
var HIRO_API_BASE_URL_TESTNET = "https://api.testnet.hiro.so";
var HIRO_INSCRIPTIONS_API_URL = "https://api.hiro.so/ordinals/v1/inscriptions";
var HIRO_API_BASE_URL_NAKAMOTO_TESTNET = "https://api.nakamoto.testnet.hiro.so";
var HIRO_API_BASE_URL_MAINNET_EXTENDED = "https://api.hiro.so/extended/v1";
var HIRO_API_BASE_URL_TESTNET_EXTENDED = "https://api.testnet.hiro.so/extended";
var BITCOIN_API_BASE_URL_MAINNET = "https://leather.mempool.space/api";
var BITCOIN_API_BASE_URL_TESTNET3 = "https://leather.mempool.space/testnet/api";
var BITCOIN_API_BASE_URL_TESTNET4 = "https://leather.mempool.space/testnet4/api";
var BITCOIN_API_BASE_URL_SIGNET = "https://mempool.space/signet/api";
var BESTINSLOT_API_BASE_URL_MAINNET = "https://leatherapi.bestinslot.xyz/v3";
var BESTINSLOT_API_BASE_URL_TESTNET = "https://leatherapi_testnet.bestinslot.xyz/v3";
var STX20_API_BASE_URL_MAINNET = "https://api.stx20.com/api/v1";
var BNS_V2_API_BASE_URL = "https://api.bnsv2.com";
var ChainId = /* @__PURE__ */ ((ChainId2) => {
  ChainId2[ChainId2["Testnet"] = 2147483648] = "Testnet";
  ChainId2[ChainId2["Mainnet"] = 1] = "Mainnet";
  return ChainId2;
})(ChainId || {});
var WalletDefaultNetworkConfigurationIds = /* @__PURE__ */ ((WalletDefaultNetworkConfigurationIds2) => {
  WalletDefaultNetworkConfigurationIds2["mainnet"] = "mainnet";
  WalletDefaultNetworkConfigurationIds2["testnet"] = "testnet";
  WalletDefaultNetworkConfigurationIds2["testnet4"] = "testnet4";
  WalletDefaultNetworkConfigurationIds2["signet"] = "signet";
  WalletDefaultNetworkConfigurationIds2["sbtcTestnet"] = "sbtcTestnet";
  WalletDefaultNetworkConfigurationIds2["sbtcDevenv"] = "sbtcDevenv";
  WalletDefaultNetworkConfigurationIds2["devnet"] = "devnet";
  return WalletDefaultNetworkConfigurationIds2;
})(WalletDefaultNetworkConfigurationIds || {});
var supportedBlockchains = ["stacks", "bitcoin"];
var networkModes = ["mainnet", "testnet"];
var testnetModes = ["testnet", "regtest", "signet"];
var bitcoinNetworks = ["mainnet", "testnet3", "testnet4", "regtest", "signet"];
function bitcoinNetworkToNetworkMode(network) {
  switch (network) {
    case "mainnet":
      return "mainnet";
    case "testnet3":
      return "testnet";
    case "testnet4":
      return "testnet";
    case "regtest":
      return "regtest";
    case "signet":
      return "signet";
    default:
      throw new Error(`Unhandled case: ${network}`);
  }
}
var networkMainnet = {
  id: "mainnet" /* mainnet */,
  name: "Mainnet",
  chain: {
    stacks: {
      blockchain: "stacks",
      chainId: 1 /* Mainnet */,
      url: HIRO_API_BASE_URL_MAINNET
    },
    bitcoin: {
      blockchain: "bitcoin",
      bitcoinNetwork: "mainnet",
      mode: "mainnet",
      bitcoinUrl: BITCOIN_API_BASE_URL_MAINNET
    }
  }
};
var networkTestnet = {
  id: "testnet" /* testnet */,
  name: "Testnet3",
  chain: {
    stacks: {
      blockchain: "stacks",
      chainId: 2147483648 /* Testnet */,
      url: HIRO_API_BASE_URL_TESTNET
    },
    bitcoin: {
      blockchain: "bitcoin",
      bitcoinNetwork: "testnet3",
      mode: "testnet",
      bitcoinUrl: BITCOIN_API_BASE_URL_TESTNET3
    }
  }
};
var networkTestnet4 = {
  id: "testnet4" /* testnet4 */,
  name: "Testnet4",
  chain: {
    stacks: {
      blockchain: "stacks",
      chainId: 2147483648 /* Testnet */,
      url: HIRO_API_BASE_URL_TESTNET
    },
    bitcoin: {
      blockchain: "bitcoin",
      bitcoinNetwork: "testnet4",
      mode: "testnet",
      bitcoinUrl: BITCOIN_API_BASE_URL_TESTNET4
    }
  }
};
var networkSignet = {
  id: "signet" /* signet */,
  name: "Signet",
  chain: {
    stacks: {
      blockchain: "stacks",
      chainId: 2147483648 /* Testnet */,
      url: HIRO_API_BASE_URL_TESTNET
    },
    bitcoin: {
      blockchain: "bitcoin",
      bitcoinNetwork: "signet",
      mode: "signet",
      bitcoinUrl: BITCOIN_API_BASE_URL_SIGNET
    }
  }
};
var networkSbtcTestnet = {
  id: "sbtcTestnet" /* sbtcTestnet */,
  name: "sBTC Testnet",
  chain: {
    stacks: {
      blockchain: "stacks",
      chainId: 2147483648 /* Testnet */,
      url: HIRO_API_BASE_URL_TESTNET
    },
    bitcoin: {
      blockchain: "bitcoin",
      bitcoinNetwork: "regtest",
      mode: "regtest",
      bitcoinUrl: "https://beta.sbtc-mempool.tech/api/proxy"
    }
  }
};
var networkSbtcDevenv = {
  id: "sbtcDevenv" /* sbtcDevenv */,
  name: "sBTC Devenv",
  chain: {
    stacks: {
      blockchain: "stacks",
      chainId: 2147483648 /* Testnet */,
      url: "http://localhost:3999"
    },
    bitcoin: {
      blockchain: "bitcoin",
      bitcoinNetwork: "regtest",
      mode: "regtest",
      bitcoinUrl: "http://localhost:3000/api/proxy"
    }
  }
};
var networkDevnet = {
  id: "devnet" /* devnet */,
  name: "Devnet",
  chain: {
    stacks: {
      blockchain: "stacks",
      chainId: 2147483648 /* Testnet */,
      url: "http://localhost:3999"
    },
    bitcoin: {
      blockchain: "bitcoin",
      bitcoinNetwork: "regtest",
      mode: "regtest",
      bitcoinUrl: "http://localhost:18443"
    }
  }
};
var defaultCurrentNetwork = networkMainnet;
var defaultNetworksKeyedById = {
  ["mainnet" /* mainnet */]: networkMainnet,
  ["testnet4" /* testnet4 */]: networkTestnet4,
  ["testnet" /* testnet */]: networkTestnet,
  ["signet" /* signet */]: networkSignet,
  ["sbtcTestnet" /* sbtcTestnet */]: networkSbtcTestnet,
  ["sbtcDevenv" /* sbtcDevenv */]: networkSbtcDevenv,
  ["devnet" /* devnet */]: networkDevnet
};

// src/crypto-assets/bitcoin/inscription.model.ts
var inscriptionMimeTypes = [
  "audio",
  "gltf",
  "html",
  "image",
  "svg",
  "text",
  "video",
  "other"
];
function whenInscriptionMimeType(mimeType, branches) {
  if (mimeType.startsWith("audio/") && branches.audio) {
    return branches.audio();
  }
  if (mimeType.startsWith("text/html") && branches.html) {
    return branches.html();
  }
  if (mimeType.startsWith("image/svg") && branches.svg) {
    return branches.svg();
  }
  if (mimeType.startsWith("image/") && branches.image) {
    return branches.image();
  }
  if (mimeType.startsWith("text") && branches.text) {
    return branches.text();
  }
  if (mimeType.startsWith("video/") && branches.video) {
    return branches.video();
  }
  if (mimeType.startsWith("model/gltf") && branches.gltf) {
    return branches.gltf();
  }
  if (branches.other) return branches.other();
  throw new Error("Unhandled inscription type");
}
function createInscription(inscription) {
  const contentSrc = `${HIRO_INSCRIPTIONS_API_URL}/${inscription.id}/content`;
  const iframeSrc = `https://ordinals.com/preview/${inscription.id}`;
  const preview = `https://ordinals.hiro.so/inscription/${inscription.id}`;
  const title = `Inscription ${inscription.number}`;
  const sharedInfo = {
    chain: CryptoAssetChains.bitcoin,
    category: CryptoAssetCategories.nft,
    protocol: CryptoAssetProtocols.inscription,
    id: inscription.id,
    number: inscription.number,
    output: inscription.output,
    txid: inscription.txid,
    offset: inscription.offset,
    address: inscription.address,
    genesisBlockHash: inscription.genesisBlockHash,
    genesisTimestamp: inscription.genesisTimestamp,
    genesisBlockHeight: inscription.genesisBlockHeight,
    value: inscription.value,
    preview,
    title
  };
  return whenInscriptionMimeType(inscription.contentType, {
    audio: () => ({
      ...sharedInfo,
      mimeType: "audio",
      name: "inscription",
      src: iframeSrc
    }),
    gltf: () => ({
      ...sharedInfo,
      mimeType: "gltf",
      name: "inscription",
      src: iframeSrc
    }),
    html: () => ({
      ...sharedInfo,
      mimeType: "html",
      name: "inscription",
      src: iframeSrc
    }),
    image: () => ({
      ...sharedInfo,
      mimeType: "image",
      name: "inscription",
      src: contentSrc
    }),
    svg: () => ({
      ...sharedInfo,
      mimeType: "svg",
      name: "inscription",
      src: iframeSrc
    }),
    text: () => ({
      ...sharedInfo,
      mimeType: "text",
      name: "inscription",
      src: contentSrc
    }),
    video: () => ({
      ...sharedInfo,
      mimeType: "video",
      name: "inscription",
      src: iframeSrc
    }),
    other: () => ({
      ...sharedInfo,
      mimeType: "other",
      name: "inscription",
      src: ""
    })
  });
}

// src/fees/bitcoin-fees.model.ts
var btcTxTimeMap = {
  fastestFee: "~10 \u2013 20min",
  halfHourFee: "~30 min",
  hourFee: "~1 hour+"
};
var BtcFeeType = /* @__PURE__ */ ((BtcFeeType2) => {
  BtcFeeType2["High"] = "High";
  BtcFeeType2["Standard"] = "Standard";
  BtcFeeType2["Low"] = "Low";
  return BtcFeeType2;
})(BtcFeeType || {});

// src/fees/fees.model.ts
var FeeTypes = /* @__PURE__ */ ((FeeTypes2) => {
  FeeTypes2[FeeTypes2["Low"] = 0] = "Low";
  FeeTypes2[FeeTypes2["Middle"] = 1] = "Middle";
  FeeTypes2[FeeTypes2["High"] = 2] = "High";
  FeeTypes2[FeeTypes2["Custom"] = 3] = "Custom";
  FeeTypes2[FeeTypes2["Unknown"] = 4] = "Unknown";
  return FeeTypes2;
})(FeeTypes || {});
var FeeCalculationTypes = /* @__PURE__ */ ((FeeCalculationTypes2) => {
  FeeCalculationTypes2["Api"] = "api";
  FeeCalculationTypes2["Default"] = "default";
  FeeCalculationTypes2["DefaultSimulated"] = "default-simulated";
  FeeCalculationTypes2["FeesCapped"] = "fees-capped";
  FeeCalculationTypes2["TokenTransferSpecific"] = "token-transfer-specific";
  return FeeCalculationTypes2;
})(FeeCalculationTypes || {});

// src/market.model.ts
function createMarketPair(base, quote) {
  return Object.freeze({ base, quote });
}
function formatMarketPair({ base, quote }) {
  return `${base}/${quote}`;
}
function createMarketData(pair, price) {
  if (pair.quote !== price.symbol)
    throw new Error("Cannot create market data when price does not match quote");
  return Object.freeze({ pair, price });
}

// src/network/network.schema.ts
import { z } from "zod";
var bitcoinNetworkModesSchema = z.enum([...networkModes, ...testnetModes]);
var bitcoinNetworkSchema = z.enum([...bitcoinNetworks]);
var networkConfigurationSchema = z.object({
  name: z.string(),
  id: z.string(),
  chain: z.object({
    bitcoin: z.object({
      blockchain: z.literal("bitcoin"),
      bitcoinUrl: z.string(),
      bitcoinNetwork: bitcoinNetworkSchema,
      mode: bitcoinNetworkModesSchema
    }),
    stacks: z.object({
      blockchain: z.literal("stacks"),
      url: z.string(),
      chainId: z.number(),
      subnetChainId: z.number().optional()
    })
  })
});

// src/settings.model.ts
import { z as z2 } from "zod";
var emailAddressSchema = z2.string().email({ message: "Invalid email address" });

// src/activity/activity-level.model.ts
var ActivityLevels = {
  account: "account",
  app: "app"
};

// src/activity/activity-status.model.ts
var OnChainActivityStatuses = {
  pending: "pending",
  success: "success",
  failed: "failed"
};

// src/activity/activity-type.model.ts
var OnChainActivityTypes = {
  deploySmartContract: "deploySmartContract",
  executeSmartContract: "executeSmartContract",
  lockAsset: "lockAsset",
  sendAsset: "sendAsset",
  receiveAsset: "receiveAsset",
  swapAssets: "swapAssets"
};
var WalletActivityTypes = {
  connectApp: "connectApp",
  signMessage: "signMessage"
};
var GeneralActivityTypes = {
  walletAdded: "walletAdded",
  receiveAnnouncement: "receiveAnnouncement",
  featureWaitlistNotification: "featureWaitlistNotification"
};

// src/account.model.ts
import { z as z3 } from "zod";
var walletIdSchema = z3.object({
  fingerprint: z3.string()
});
var accountIdSchema = walletIdSchema.merge(z3.object({ accountIndex: z3.number() }));
var bitcoinAddressInfoSchema = z3.object({
  taprootDescriptor: z3.string(),
  nativeSegwitDescriptor: z3.string()
});
var stacksAddressInfoSchema = z3.object({
  stxAddress: z3.string()
});
var accountAddressesSchema = z3.object({
  id: accountIdSchema,
  bitcoin: bitcoinAddressInfoSchema.optional(),
  stacks: stacksAddressInfoSchema.optional()
});
export {
  ActivityLevels,
  BESTINSLOT_API_BASE_URL_MAINNET,
  BESTINSLOT_API_BASE_URL_TESTNET,
  BITCOIN_API_BASE_URL_MAINNET,
  BITCOIN_API_BASE_URL_SIGNET,
  BITCOIN_API_BASE_URL_TESTNET3,
  BITCOIN_API_BASE_URL_TESTNET4,
  BNS_V2_API_BASE_URL,
  BtcFeeType,
  ChainId,
  CryptoAssetCategories,
  CryptoAssetChains,
  CryptoAssetProtocols,
  FeeCalculationTypes,
  FeeTypes,
  GeneralActivityTypes,
  HIRO_API_BASE_URL_MAINNET,
  HIRO_API_BASE_URL_MAINNET_EXTENDED,
  HIRO_API_BASE_URL_NAKAMOTO_TESTNET,
  HIRO_API_BASE_URL_TESTNET,
  HIRO_API_BASE_URL_TESTNET_EXTENDED,
  HIRO_INSCRIPTIONS_API_URL,
  OnChainActivityStatuses,
  OnChainActivityTypes,
  STX20_API_BASE_URL_MAINNET,
  WalletActivityTypes,
  WalletDefaultNetworkConfigurationIds,
  accountAddressesSchema,
  accountIdSchema,
  bitcoinAddressInfoSchema,
  bitcoinNetworkModesSchema,
  bitcoinNetworkSchema,
  bitcoinNetworkToNetworkMode,
  bitcoinNetworks,
  btcTxTimeMap,
  createInscription,
  createMarketData,
  createMarketPair,
  defaultCurrentNetwork,
  defaultNetworksKeyedById,
  emailAddressSchema,
  formatMarketPair,
  inscriptionMimeTypes,
  networkConfigurationSchema,
  networkModes,
  stacksAddressInfoSchema,
  supportedBlockchains,
  testnetModes,
  walletIdSchema,
  whenInscriptionMimeType
};
//# sourceMappingURL=index.js.map