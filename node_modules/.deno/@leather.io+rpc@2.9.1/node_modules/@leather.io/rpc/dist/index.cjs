"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  Bip322MessageTypesSchema: () => Bip322MessageTypesSchema,
  RpcErrorCode: () => RpcErrorCode,
  addressResponseBodySchema: () => addressResponseBodySchema,
  addressSchema: () => addressSchema,
  baseStacksTransactionConfigSchema: () => baseStacksTransactionConfigSchema,
  bitcoinPaymentTypesSchema: () => bitcoinPaymentTypesSchema,
  btcAddressBaseSchema: () => btcAddressBaseSchema,
  btcAddressSchema: () => btcAddressSchema,
  clarityValueSchema: () => clarityValueSchema,
  createRequestEncoder: () => createRequestEncoder,
  createRpcErrorBodySchema: () => createRpcErrorBodySchema,
  createRpcErrorResponse: () => createRpcErrorResponse,
  createRpcErrorResponseSchema: () => createRpcErrorResponseSchema,
  createRpcRequestSchema: () => createRpcRequestSchema,
  createRpcResponseSchema: () => createRpcResponseSchema,
  createRpcSuccessResponse: () => createRpcSuccessResponse,
  createRpcSuccessResponseSchema: () => createRpcSuccessResponseSchema,
  cvAddressSchema: () => cvAddressSchema,
  cvAsciiSchema: () => cvAsciiSchema,
  cvBufferSchema: () => cvBufferSchema,
  cvContractSchema: () => cvContractSchema,
  cvErrSchema: () => cvErrSchema,
  cvFalseSchema: () => cvFalseSchema,
  cvIntSchema: () => cvIntSchema,
  cvListSchema: () => cvListSchema,
  cvNoneSchema: () => cvNoneSchema,
  cvOkSchema: () => cvOkSchema,
  cvSomeSchema: () => cvSomeSchema,
  cvTrueSchema: () => cvTrueSchema,
  cvTupleSchema: () => cvTupleSchema,
  cvUintSchema: () => cvUintSchema,
  cvUtf8Schema: () => cvUtf8Schema,
  decodeBase64Json: () => decodeBase64Json,
  defaultErrorSchema: () => defaultErrorSchema,
  defineRpcEndpoint: () => defineRpcEndpoint,
  encodeBase64Json: () => encodeBase64Json,
  endpoints: () => endpoints,
  getAddresses: () => getAddresses,
  getInfo: () => getInfo,
  open: () => open,
  openSwap: () => openSwap,
  rpcBasePropsSchema: () => rpcBasePropsSchema,
  rpcParameterSchema: () => rpcParameterSchema,
  sendTransfer: () => sendTransfer,
  signMessage: () => signMessage,
  signMessageRequestParamsSchema: () => signMessageRequestParamsSchema,
  signPsbt: () => signPsbt,
  signatureHash: () => signatureHash,
  stacksTransactionDetailsSchema: () => stacksTransactionDetailsSchema,
  stxAddressItemSchema: () => stxAddressItemSchema,
  stxAddressSchema: () => stxAddressSchema,
  stxCallContract: () => stxCallContract,
  stxDeployContract: () => stxDeployContract,
  stxDeployContractResponseBodySchema: () => stxDeployContractResponseBodySchema,
  stxGetAddresses: () => stxGetAddresses,
  stxGetAddressesResponseBodySchema: () => stxGetAddressesResponseBodySchema,
  stxSignMessage: () => stxSignMessage,
  stxSignMessageRequestBaseSchema: () => stxSignMessageRequestBaseSchema,
  stxSignMessageRequestStructuredSchema: () => stxSignMessageRequestStructuredSchema,
  stxSignMessageRequestUtf8Schema: () => stxSignMessageRequestUtf8Schema,
  stxSignMessageTypeSchema: () => stxSignMessageTypeSchema,
  stxSignStructuredMessage: () => stxSignStructuredMessage,
  stxSignTransaction: () => stxSignTransaction,
  stxSignTransactionRequestLeatherRpcParamsSchema: () => stxSignTransactionRequestLeatherRpcParamsSchema,
  stxSignTransactionRequestSip30ParamsSchema: () => stxSignTransactionRequestSip30ParamsSchema,
  stxTransferSip10Ft: () => stxTransferSip10Ft,
  stxTransferSip9Nft: () => stxTransferSip9Nft,
  stxTransferStx: () => stxTransferStx,
  stxUpdateProfile: () => stxUpdateProfile,
  stxUpdateProfileRequestParamsSchema: () => stxUpdateProfileRequestParamsSchema,
  stxUpdateProfileResponseBodySchema: () => stxUpdateProfileResponseBodySchema,
  supportedMethodSchema: () => supportedMethodSchema,
  supportedMethods: () => supportedMethods,
  testIsNumberOrArrayOfNumbers: () => testIsNumberOrArrayOfNumbers
});
module.exports = __toCommonJS(index_exports);

// src/methods/bitcoin/send-transfer.ts
var import_zod2 = require("zod");

// src/rpc/schemas.ts
var import_zod = require("zod");
var rpcParameterByPositionSchema = import_zod.z.string().array();
var rpcParameterByNameSchema = import_zod.z.record(import_zod.z.string(), import_zod.z.unknown());
var rpcParameterSchema = import_zod.z.union([
  rpcParameterByPositionSchema,
  rpcParameterByNameSchema,
  import_zod.z.undefined()
]);
var rpcBasePropsSchema = import_zod.z.object({
  jsonrpc: import_zod.z.literal("2.0"),
  id: import_zod.z.string()
});
function createRpcRequestSchema(method, paramsSchema) {
  if (!paramsSchema) return rpcBasePropsSchema.extend({ method: import_zod.z.literal(method) });
  return rpcBasePropsSchema.extend({
    method: import_zod.z.literal(method),
    params: paramsSchema
  });
}
var RpcErrorCode = /* @__PURE__ */ ((RpcErrorCode2) => {
  RpcErrorCode2[RpcErrorCode2["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
  RpcErrorCode2[RpcErrorCode2["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
  RpcErrorCode2[RpcErrorCode2["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
  RpcErrorCode2[RpcErrorCode2["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
  RpcErrorCode2[RpcErrorCode2["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
  RpcErrorCode2[RpcErrorCode2["SERVER_ERROR"] = -32e3] = "SERVER_ERROR";
  RpcErrorCode2[RpcErrorCode2["USER_REJECTION"] = 4001] = "USER_REJECTION";
  RpcErrorCode2[RpcErrorCode2["METHOD_NOT_SUPPORTED"] = 4002] = "METHOD_NOT_SUPPORTED";
  return RpcErrorCode2;
})(RpcErrorCode || {});
var rpcErrorCodeSchema = import_zod.z.nativeEnum(RpcErrorCode);
function createRpcErrorBodySchema(errorDataSchema) {
  return import_zod.z.object({
    code: import_zod.z.union([import_zod.z.number(), rpcErrorCodeSchema]),
    message: import_zod.z.string(),
    data: errorDataSchema.optional()
  });
}
function createRpcErrorResponseSchema(errorSchema) {
  return rpcBasePropsSchema.extend({ error: errorSchema });
}
var defaultErrorSchema = createRpcErrorBodySchema(import_zod.z.any());
function createRpcSuccessResponseSchema(resultSchema) {
  return rpcBasePropsSchema.extend({ result: resultSchema });
}
function createRpcResponseSchema(resultSchema, errorSchema) {
  return import_zod.z.union([
    createRpcSuccessResponseSchema(resultSchema),
    createRpcErrorResponseSchema(errorSchema)
  ]);
}
function defineRpcEndpoint(props) {
  const error = props.error ?? defaultErrorSchema;
  if ("params" in props) {
    return {
      method: props.method,
      params: props.params,
      result: props.result,
      error,
      request: createRpcRequestSchema(props.method, props.params),
      response: createRpcResponseSchema(props.result, error)
    };
  }
  return {
    method: props.method,
    result: props.result,
    error,
    request: createRpcRequestSchema(props.method),
    response: createRpcResponseSchema(props.result, error)
  };
}

// src/methods/bitcoin/send-transfer.ts
var sendTransferLegacyParamSchema = import_zod2.z.object({
  account: import_zod2.z.number().optional(),
  address: import_zod2.z.string(),
  amount: import_zod2.z.coerce.string(),
  network: import_zod2.z.string()
});
var transferRecipientParamSchema = import_zod2.z.object({
  address: import_zod2.z.string(),
  amount: import_zod2.z.coerce.string()
});
var rpcSendTransferParamsSchema = import_zod2.z.object({
  account: import_zod2.z.number().optional(),
  recipients: import_zod2.z.array(transferRecipientParamSchema),
  network: import_zod2.z.string()
});
var sendTransfer = defineRpcEndpoint({
  method: "sendTransfer",
  params: import_zod2.z.union([sendTransferLegacyParamSchema, rpcSendTransferParamsSchema]),
  result: import_zod2.z.object({
    txid: import_zod2.z.string()
  })
});

// src/methods/bitcoin/sign-message.ts
var import_zod3 = require("zod");
var Bip322MessageTypesSchema = import_zod3.z.enum(["legacy", "bip322"]);
var supportedPaymentTypesSchema = import_zod3.z.enum(["p2tr", "p2wpkh"]);
var signMessageRequestParamsSchema = import_zod3.z.object({
  type: Bip322MessageTypesSchema.optional(),
  account: import_zod3.z.number().optional(),
  message: import_zod3.z.string(),
  paymentType: supportedPaymentTypesSchema
}).passthrough();
var signMessage = defineRpcEndpoint({
  method: "signMessage",
  params: signMessageRequestParamsSchema,
  result: import_zod3.z.object({
    signature: import_zod3.z.string(),
    address: import_zod3.z.string()
  }).passthrough()
});

// src/methods/bitcoin/sign-psbt.ts
var import_zod4 = require("zod");

// src/rpc/helpers.ts
var import_utils = require("@leather.io/utils");
function testIsNumberOrArrayOfNumbers(value) {
  if ((0, import_utils.isUndefined)(value)) return true;
  return (0, import_utils.isNumberOrNumberList)(value);
}
function encodeBase64Json(payload) {
  const jsonString = JSON.stringify(payload);
  return btoa(jsonString);
}
function decodeBase64Json(encodedPayload) {
  const jsonString = atob(encodedPayload);
  return JSON.parse(jsonString);
}
function createRequestEncoder(schema) {
  function encode(request) {
    return encodeBase64Json(schema.parse(request));
  }
  function decode(encodedRequest) {
    const parsedJson = decodeBase64Json(encodedRequest);
    return schema.parse(parsedJson);
  }
  return { encode, decode };
}

// src/methods/bitcoin/sign-psbt.ts
var signatureHash = {
  DEFAULT: 0,
  ALL: 1,
  NONE: 2,
  SINGLE: 3,
  ALL_ANYONECANPAY: 129,
  NONE_ANYONECANPAY: 130,
  SINGLE_ANYONECANPAY: 131
};
var signPsbtRequestParamsSchema = import_zod4.z.object({
  account: import_zod4.z.number().optional(),
  allowedSighash: import_zod4.z.array(import_zod4.z.any()).optional(),
  broadcast: import_zod4.z.boolean().optional(),
  hex: import_zod4.z.string(),
  network: import_zod4.z.string().optional(),
  signAtIndex: import_zod4.z.union([import_zod4.z.number(), import_zod4.z.array(import_zod4.z.number())]).optional().refine(testIsNumberOrArrayOfNumbers)
});
var signPsbtResponseBodySchema = import_zod4.z.object({
  hex: import_zod4.z.string(),
  txid: import_zod4.z.string().optional()
});
var signPsbt = defineRpcEndpoint({
  method: "signPsbt",
  params: signPsbtRequestParamsSchema,
  result: signPsbtResponseBodySchema
});

// src/methods/get-addresses.ts
var import_zod5 = require("zod");
var bitcoinPaymentTypesSchema = import_zod5.z.enum(["p2pkh", "p2sh", "p2wpkh-p2sh", "p2wpkh", "p2tr"]);
var btcAddressBaseSchema = import_zod5.z.object({
  symbol: import_zod5.z.literal("BTC"),
  type: bitcoinPaymentTypesSchema,
  address: import_zod5.z.string(),
  publicKey: import_zod5.z.string(),
  derivationPath: import_zod5.z.string()
});
var nativeSegwitAddressSchema = btcAddressBaseSchema.extend({
  type: import_zod5.z.literal("p2wpkh")
}).passthrough();
var taprootAddressSchema = btcAddressBaseSchema.extend({
  type: import_zod5.z.literal("p2tr"),
  tweakedPublicKey: import_zod5.z.string()
}).passthrough();
var btcAddressSchema = import_zod5.z.discriminatedUnion("type", [
  nativeSegwitAddressSchema,
  taprootAddressSchema
]);
var stxAddressSchema = import_zod5.z.object({
  symbol: import_zod5.z.literal("STX"),
  address: import_zod5.z.string(),
  publicKey: import_zod5.z.string()
}).passthrough();
var addressSchema = import_zod5.z.union([btcAddressSchema, stxAddressSchema]);
var addressResponseBodySchema = import_zod5.z.object({ addresses: import_zod5.z.array(addressSchema) }).passthrough();
var getAddresses = defineRpcEndpoint({
  method: "getAddresses",
  params: import_zod5.z.object({ network: import_zod5.z.string().optional() }).optional(),
  result: addressResponseBodySchema
});

// src/methods/get-info.ts
var import_zod6 = require("zod");
var getInfoResponseBodySchema = import_zod6.z.object({
  version: import_zod6.z.string(),
  supportedMethods: import_zod6.z.array(import_zod6.z.string()).optional()
});
var getInfo = defineRpcEndpoint({
  method: "getInfo",
  result: getInfoResponseBodySchema
});

// src/methods/open.ts
var import_zod7 = require("zod");
var open = defineRpcEndpoint({
  method: "open",
  params: import_zod7.z.object({
    base: import_zod7.z.string(),
    quote: import_zod7.z.string()
  }),
  result: import_zod7.z.object({
    message: import_zod7.z.string()
  })
});

// src/methods/open-swap.ts
var import_zod8 = require("zod");
var openSwapRequestParamsSchema = import_zod8.z.object({
  base: import_zod8.z.string(),
  quote: import_zod8.z.string()
});
var openSwapResponseBodySchema = import_zod8.z.object({
  message: import_zod8.z.string()
});
var openSwap = defineRpcEndpoint({
  method: "openSwap",
  params: openSwapRequestParamsSchema,
  result: openSwapResponseBodySchema
});

// src/methods/stacks/stx-call-contract.ts
var import_zod10 = require("zod");

// src/methods/stacks/_stacks-helpers.ts
var import_zod9 = require("zod");
var stacksTransactionDetailsSchema = import_zod9.z.object({
  txid: import_zod9.z.string(),
  transaction: import_zod9.z.string()
});
var baseStacksTransactionConfigSchema = import_zod9.z.object({
  address: import_zod9.z.string().optional(),
  network: import_zod9.z.union([
    import_zod9.z.literal("mainnet"),
    import_zod9.z.literal("testnet"),
    import_zod9.z.literal("regtest"),
    import_zod9.z.literal("devnet"),
    import_zod9.z.literal("mocknet"),
    import_zod9.z.string()
  ]).optional(),
  fee: import_zod9.z.coerce.number().optional(),
  nonce: import_zod9.z.coerce.number().optional(),
  // add pc later when imported from stacks.js
  postConditions: import_zod9.z.array(import_zod9.z.string()).optional(),
  postConditionMode: import_zod9.z.union([import_zod9.z.literal("allow"), import_zod9.z.literal("deny")]).optional(),
  sponsored: import_zod9.z.boolean().optional()
});

// src/methods/stacks/stx-call-contract.ts
var stxCallContract = defineRpcEndpoint({
  method: "stx_callContract",
  params: import_zod10.z.intersection(
    import_zod10.z.object({
      contract: import_zod10.z.string(),
      functionName: import_zod10.z.string(),
      functionArgs: import_zod10.z.array(import_zod10.z.string()).optional()
    }),
    baseStacksTransactionConfigSchema
  ),
  result: stacksTransactionDetailsSchema
});

// src/methods/stacks/stx-deploy-contract.ts
var import_zod11 = require("zod");
var stxDeployContractResponseBodySchema = stacksTransactionDetailsSchema;
var stxDeployContract = defineRpcEndpoint({
  method: "stx_deployContract",
  params: import_zod11.z.intersection(
    import_zod11.z.object({
      name: import_zod11.z.string(),
      clarityCode: import_zod11.z.string(),
      clarityVersion: import_zod11.z.coerce.number().optional()
    }),
    baseStacksTransactionConfigSchema
  ),
  result: stxDeployContractResponseBodySchema
});

// src/methods/stacks/stx-get-addresses.ts
var import_zod12 = require("zod");
var stxAddressItemSchema = import_zod12.z.object({
  address: import_zod12.z.string(),
  publicKey: import_zod12.z.string(),
  derivationPath: import_zod12.z.string()
});
var stxGetAddressesResponseBodySchema = import_zod12.z.array(stxAddressItemSchema);
var stxGetAddresses = defineRpcEndpoint({
  method: "stx_getAddresses",
  params: import_zod12.z.object({ network: import_zod12.z.string().optional() }).optional(),
  result: stxGetAddressesResponseBodySchema
});

// src/methods/stacks/stx-get-networks.ts
var import_zod13 = require("zod");
var stxGetNetworks = defineRpcEndpoint({
  method: "stx_getNetworks",
  result: import_zod13.z.object({
    active: import_zod13.z.string(),
    networks: import_zod13.z.array(
      import_zod13.z.object({
        id: import_zod13.z.string(),
        chainId: import_zod13.z.string(),
        transactionVersion: import_zod13.z.string()
      }).passthrough()
    )
  })
});

// src/methods/stacks/stx-sign-message.ts
var import_zod14 = require("zod");
var stxSignMessageTypeSchema = import_zod14.z.enum(["utf8", "structured"]);
var stxSignMessageRequestBaseSchema = import_zod14.z.object({
  messageType: stxSignMessageTypeSchema.optional().default("utf8"),
  network: import_zod14.z.optional(import_zod14.z.enum(["mainnet", "testnet", "devnet", "mocknet"]))
});
var stxSignMessageRequestUtf8Schema = stxSignMessageRequestBaseSchema.merge(
  import_zod14.z.object({
    messageType: import_zod14.z.literal("utf8").default("utf8"),
    message: import_zod14.z.string()
  })
);
var stxSignMessageRequestStructuredSchema = stxSignMessageRequestBaseSchema.merge(
  import_zod14.z.object({
    messageType: import_zod14.z.literal("structured"),
    domain: import_zod14.z.string(),
    message: import_zod14.z.string()
  })
);
var stxSignMessage = defineRpcEndpoint({
  method: "stx_signMessage",
  params: import_zod14.z.union([stxSignMessageRequestUtf8Schema, stxSignMessageRequestStructuredSchema]),
  result: import_zod14.z.object({
    signature: import_zod14.z.string(),
    publicKey: import_zod14.z.string()
  })
});

// src/methods/stacks/stx-sign-structured-message.ts
var import_zod15 = require("zod");
var stxSignStructuredMessage = defineRpcEndpoint({
  method: "stx_signStructuredMessage",
  params: import_zod15.z.object({
    domain: import_zod15.z.string(),
    message: import_zod15.z.string()
  }),
  result: import_zod15.z.object({
    signature: import_zod15.z.string(),
    publicKey: import_zod15.z.string()
  })
});

// src/methods/stacks/stx-sign-transaction.ts
var import_zod16 = require("zod");
var stxSignTransactionRequestLeatherRpcParamsSchema = import_zod16.z.object({
  txHex: import_zod16.z.string(),
  stxAddress: import_zod16.z.string().optional(),
  attachment: import_zod16.z.string().optional(),
  accountIndex: import_zod16.z.string().optional(),
  network: import_zod16.z.string().optional()
});
var stxSignTransactionRequestSip30ParamsSchema = import_zod16.z.object({
  transaction: import_zod16.z.string(),
  network: import_zod16.z.string().optional()
});
var stxSignTransaction = defineRpcEndpoint({
  method: "stx_signTransaction",
  params: import_zod16.z.union([
    stxSignTransactionRequestLeatherRpcParamsSchema,
    stxSignTransactionRequestSip30ParamsSchema
  ]),
  result: import_zod16.z.object({
    transaction: import_zod16.z.string(),
    txHex: import_zod16.z.string()
  })
});

// src/methods/stacks/stx-transfer-sip9-nft.ts
var import_zod17 = require("zod");
var stxTransferSip9Nft = defineRpcEndpoint({
  method: "stx_transferSip9Nft",
  params: import_zod17.z.intersection(
    import_zod17.z.object({
      recipient: import_zod17.z.string(),
      asset: import_zod17.z.string(),
      assetId: import_zod17.z.string()
    }),
    baseStacksTransactionConfigSchema
  ),
  result: stacksTransactionDetailsSchema
});

// src/methods/stacks/stx-transfer-sip10-ft.ts
var import_zod18 = require("zod");
var stxTransferSip10Ft = defineRpcEndpoint({
  method: "stx_transferSip10Ft",
  params: import_zod18.z.intersection(
    import_zod18.z.object({
      recipient: import_zod18.z.string(),
      asset: import_zod18.z.string(),
      amount: import_zod18.z.coerce.number()
    }),
    baseStacksTransactionConfigSchema
  ),
  result: stacksTransactionDetailsSchema
});

// src/methods/stacks/stx-transfer-stx.ts
var import_zod19 = require("zod");
var stxTransferStx = defineRpcEndpoint({
  method: "stx_transferStx",
  params: import_zod19.z.intersection(
    import_zod19.z.object({
      recipient: import_zod19.z.string(),
      amount: import_zod19.z.coerce.number(),
      memo: import_zod19.z.string().optional()
    }),
    baseStacksTransactionConfigSchema
  ),
  result: stacksTransactionDetailsSchema
});

// src/methods/stacks/stx-update-profile.ts
var import_zod20 = require("zod");
var stxUpdateProfileRequestParamsSchema = import_zod20.z.object({
  // schema.org/Person
  person: import_zod20.z.object({}).passthrough()
});
var stxUpdateProfileResponseBodySchema = stacksTransactionDetailsSchema;
var stxUpdateProfile = defineRpcEndpoint({
  method: "stx_updateProfile",
  params: stxUpdateProfileRequestParamsSchema,
  result: stxUpdateProfileResponseBodySchema
});

// src/methods/supported-methods.ts
var import_zod21 = require("zod");
var supportedMethodSchema = import_zod21.z.object({
  name: import_zod21.z.string(),
  docsUrl: import_zod21.z.union([import_zod21.z.string(), import_zod21.z.array(import_zod21.z.string())])
});
var supportedMethods = defineRpcEndpoint({
  method: "supportedMethods",
  result: import_zod21.z.object({
    documentation: import_zod21.z.string(),
    methods: import_zod21.z.array(supportedMethodSchema)
  })
});

// src/methods/stacks/_clarity-values.ts
var import_zod22 = require("zod");
var cvIntSchema = import_zod22.z.object({
  type: import_zod22.z.literal("int"),
  value: import_zod22.z.coerce.string()
});
var cvUintSchema = import_zod22.z.object({
  type: import_zod22.z.literal("uint"),
  value: import_zod22.z.coerce.string()
});
var cvBufferSchema = import_zod22.z.object({
  type: import_zod22.z.literal("buffer"),
  value: import_zod22.z.string()
});
var cvTrueSchema = import_zod22.z.object({
  type: import_zod22.z.literal("true")
});
var cvFalseSchema = import_zod22.z.object({
  type: import_zod22.z.literal("false")
});
var cvAddressSchema = import_zod22.z.object({
  type: import_zod22.z.literal("address"),
  value: import_zod22.z.string()
});
var cvContractSchema = import_zod22.z.object({
  type: import_zod22.z.literal("contract"),
  value: import_zod22.z.string().refine((value) => value.includes("."), {
    message: "Stacks contract principals are denoted with a dot"
  })
});
var cvAsciiSchema = import_zod22.z.object({
  type: import_zod22.z.literal("ascii"),
  value: import_zod22.z.string()
});
var cvUtf8Schema = import_zod22.z.object({
  type: import_zod22.z.literal("utf8"),
  value: import_zod22.z.string()
});
var cvOkSchema = import_zod22.z.object({
  type: import_zod22.z.literal("ok"),
  value: import_zod22.z.lazy(() => clarityValueSchema)
}).transform((value) => value);
var cvErrSchema = import_zod22.z.object({
  type: import_zod22.z.literal("err"),
  value: import_zod22.z.lazy(() => clarityValueSchema)
});
var cvNoneSchema = import_zod22.z.object({
  type: import_zod22.z.literal("none")
});
var cvSomeSchema = import_zod22.z.object({
  type: import_zod22.z.literal("some"),
  value: import_zod22.z.lazy(() => clarityValueSchema)
});
var cvListSchema = import_zod22.z.object({
  type: import_zod22.z.literal("list"),
  value: import_zod22.z.array(import_zod22.z.lazy(() => clarityValueSchema))
});
var cvTupleSchema = import_zod22.z.object({
  type: import_zod22.z.literal("tuple"),
  value: import_zod22.z.record(import_zod22.z.lazy(() => clarityValueSchema))
});
var clarityValueSchema = import_zod22.z.union([
  cvIntSchema,
  cvUintSchema,
  cvBufferSchema,
  cvTrueSchema,
  cvFalseSchema,
  cvAddressSchema,
  cvContractSchema,
  cvOkSchema,
  cvErrSchema,
  cvNoneSchema,
  cvSomeSchema,
  cvListSchema,
  cvTupleSchema,
  cvAsciiSchema,
  cvUtf8Schema
]);

// src/index.ts
var endpoints = {
  getAddresses,
  getInfo,
  open,
  openSwap,
  sendTransfer,
  signMessage,
  signPsbt,
  stxCallContract,
  stxDeployContract,
  stxGetAddresses,
  stxGetNetworks,
  stxSignMessage,
  stxSignStructuredMessage,
  stxSignTransaction,
  stxTransferSip10Ft,
  stxTransferSip9Nft,
  stxTransferStx,
  stxUpdateProfile,
  supportedMethods
};
function createRpcSuccessResponse(_method, response) {
  return { jsonrpc: "2.0", ...response };
}
function createRpcErrorResponse(_method, error) {
  return { jsonrpc: "2.0", ...error };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Bip322MessageTypesSchema,
  RpcErrorCode,
  addressResponseBodySchema,
  addressSchema,
  baseStacksTransactionConfigSchema,
  bitcoinPaymentTypesSchema,
  btcAddressBaseSchema,
  btcAddressSchema,
  clarityValueSchema,
  createRequestEncoder,
  createRpcErrorBodySchema,
  createRpcErrorResponse,
  createRpcErrorResponseSchema,
  createRpcRequestSchema,
  createRpcResponseSchema,
  createRpcSuccessResponse,
  createRpcSuccessResponseSchema,
  cvAddressSchema,
  cvAsciiSchema,
  cvBufferSchema,
  cvContractSchema,
  cvErrSchema,
  cvFalseSchema,
  cvIntSchema,
  cvListSchema,
  cvNoneSchema,
  cvOkSchema,
  cvSomeSchema,
  cvTrueSchema,
  cvTupleSchema,
  cvUintSchema,
  cvUtf8Schema,
  decodeBase64Json,
  defaultErrorSchema,
  defineRpcEndpoint,
  encodeBase64Json,
  endpoints,
  getAddresses,
  getInfo,
  open,
  openSwap,
  rpcBasePropsSchema,
  rpcParameterSchema,
  sendTransfer,
  signMessage,
  signMessageRequestParamsSchema,
  signPsbt,
  signatureHash,
  stacksTransactionDetailsSchema,
  stxAddressItemSchema,
  stxAddressSchema,
  stxCallContract,
  stxDeployContract,
  stxDeployContractResponseBodySchema,
  stxGetAddresses,
  stxGetAddressesResponseBodySchema,
  stxSignMessage,
  stxSignMessageRequestBaseSchema,
  stxSignMessageRequestStructuredSchema,
  stxSignMessageRequestUtf8Schema,
  stxSignMessageTypeSchema,
  stxSignStructuredMessage,
  stxSignTransaction,
  stxSignTransactionRequestLeatherRpcParamsSchema,
  stxSignTransactionRequestSip30ParamsSchema,
  stxTransferSip10Ft,
  stxTransferSip9Nft,
  stxTransferStx,
  stxUpdateProfile,
  stxUpdateProfileRequestParamsSchema,
  stxUpdateProfileResponseBodySchema,
  supportedMethodSchema,
  supportedMethods,
  testIsNumberOrArrayOfNumbers
});
//# sourceMappingURL=index.cjs.map