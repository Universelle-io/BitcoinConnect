{"version":3,"sources":["../src/crypto-assets/crypto-asset-info.model.ts","../src/network/network.model.ts","../src/crypto-assets/bitcoin/inscription.model.ts","../src/fees/bitcoin-fees.model.ts","../src/fees/fees.model.ts","../src/market.model.ts","../src/network/network.schema.ts","../src/settings.model.ts","../src/activity/activity-level.model.ts","../src/activity/activity-status.model.ts","../src/activity/activity-type.model.ts","../src/account.model.ts"],"sourcesContent":["import { InscriptionMimeType } from './bitcoin/inscription.model';\n\nexport const CryptoAssetChains = {\n  bitcoin: 'bitcoin',\n  stacks: 'stacks',\n} as const;\nexport const CryptoAssetCategories = {\n  fungible: 'fungible',\n  nft: 'nft',\n} as const;\nexport const CryptoAssetProtocols = {\n  nativeBtc: 'nativeBtc',\n  nativeStx: 'nativeStx',\n  sip10: 'sip10',\n  brc20: 'brc20',\n  src20: 'src20',\n  stx20: 'stx20',\n  rune: 'rune',\n  stamp: 'stamp',\n  sip9: 'sip9',\n  inscription: 'inscription',\n} as const;\n\nexport type CryptoAssetChain = keyof typeof CryptoAssetChains;\nexport type CryptoAssetCategory = keyof typeof CryptoAssetCategories;\nexport type CryptoAssetProtocol = keyof typeof CryptoAssetProtocols;\n\nexport interface BaseCryptoAssetInfo {\n  readonly chain: CryptoAssetChain;\n  readonly category: CryptoAssetCategory;\n  readonly protocol: CryptoAssetProtocol;\n}\n\n// Fungible asset types\ninterface BaseFungibleCryptoAssetInfo extends BaseCryptoAssetInfo {\n  readonly category: 'fungible';\n  readonly symbol: string;\n  readonly decimals: number;\n  readonly hasMemo: boolean;\n}\nexport interface BtcCryptoAssetInfo extends BaseFungibleCryptoAssetInfo {\n  readonly chain: 'bitcoin';\n  readonly protocol: 'nativeBtc';\n  readonly symbol: 'BTC';\n}\nexport interface StxCryptoAssetInfo extends BaseFungibleCryptoAssetInfo {\n  readonly chain: 'stacks';\n  readonly protocol: 'nativeStx';\n  readonly symbol: 'STX';\n}\nexport interface Brc20CryptoAssetInfo extends BaseFungibleCryptoAssetInfo {\n  readonly chain: 'bitcoin';\n  readonly protocol: 'brc20';\n  readonly symbol: string;\n}\nexport interface Src20CryptoAssetInfo extends BaseFungibleCryptoAssetInfo {\n  readonly chain: 'bitcoin';\n  readonly protocol: 'src20';\n  readonly id: string;\n  readonly symbol: string;\n  readonly deploy_tx: string;\n  readonly deploy_img: string;\n}\nexport interface RuneCryptoAssetInfo extends BaseFungibleCryptoAssetInfo {\n  readonly chain: 'bitcoin';\n  readonly protocol: 'rune';\n  readonly spacedRuneName: string;\n  readonly runeName: string;\n  readonly symbol: string;\n}\nexport interface Sip10CryptoAssetInfo extends BaseFungibleCryptoAssetInfo {\n  readonly chain: 'stacks';\n  readonly protocol: 'sip10';\n  readonly name: string;\n  readonly canTransfer: boolean;\n  readonly assetId: string;\n  readonly contractId: string;\n  readonly imageCanonicalUri: string;\n  readonly symbol: string;\n}\nexport interface Stx20CryptoAssetInfo extends BaseFungibleCryptoAssetInfo {\n  readonly chain: 'stacks';\n  readonly protocol: 'stx20';\n  readonly symbol: string;\n}\nexport type NativeCryptoAssetInfo = BtcCryptoAssetInfo | StxCryptoAssetInfo;\nexport type FungibleCryptoAssetInfo =\n  | NativeCryptoAssetInfo\n  | Sip10CryptoAssetInfo\n  | Brc20CryptoAssetInfo\n  | Src20CryptoAssetInfo\n  | Stx20CryptoAssetInfo\n  | RuneCryptoAssetInfo;\n\n// NFT asset types\ninterface BaseNonFungibleCryptoAssetInfo extends BaseCryptoAssetInfo {\n  readonly category: 'nft';\n}\nexport interface InscriptionCryptoAssetInfo extends BaseNonFungibleCryptoAssetInfo {\n  readonly chain: 'bitcoin';\n  readonly protocol: 'inscription';\n  readonly id: string;\n  readonly mimeType: InscriptionMimeType;\n  readonly number: number;\n  // via Inscription Model\n  readonly preview: string;\n  readonly src: string;\n  readonly title: string;\n  readonly output: string;\n  readonly txid: string;\n  readonly offset: string;\n  readonly address: string;\n  readonly genesisBlockHash: string;\n  readonly genesisTimestamp: number;\n  readonly genesisBlockHeight: number;\n  readonly value: string;\n}\n\nexport interface StampCryptoAssetInfo extends BaseNonFungibleCryptoAssetInfo {\n  readonly chain: 'bitcoin';\n  readonly protocol: 'stamp';\n  readonly stamp: number;\n  readonly stampUrl: string;\n}\nexport interface Sip9CryptoAssetInfo extends BaseNonFungibleCryptoAssetInfo {\n  readonly chain: 'stacks';\n  readonly protocol: 'sip9';\n  readonly assetId: string;\n  readonly contractId: string;\n  readonly name: string;\n  readonly description: string;\n  readonly cachedImage: string;\n  readonly cachedImageThumbnail: string;\n}\nexport type NonFungibleCryptoAssetInfo =\n  | InscriptionCryptoAssetInfo\n  | StampCryptoAssetInfo\n  | Sip9CryptoAssetInfo;\n\nexport type CryptoAssetInfo = FungibleCryptoAssetInfo | NonFungibleCryptoAssetInfo;\n","import { z } from 'zod';\n\nimport { Blockchain } from '../types';\nimport { networkConfigurationSchema } from './network.schema';\n\nexport const HIRO_API_BASE_URL_MAINNET = 'https://api.hiro.so';\nexport const HIRO_API_BASE_URL_TESTNET = 'https://api.testnet.hiro.so';\nexport const HIRO_INSCRIPTIONS_API_URL = 'https://api.hiro.so/ordinals/v1/inscriptions';\nexport const HIRO_API_BASE_URL_NAKAMOTO_TESTNET = 'https://api.nakamoto.testnet.hiro.so';\n\nexport const HIRO_API_BASE_URL_MAINNET_EXTENDED = 'https://api.hiro.so/extended/v1';\nexport const HIRO_API_BASE_URL_TESTNET_EXTENDED = 'https://api.testnet.hiro.so/extended';\n\nexport const BITCOIN_API_BASE_URL_MAINNET = 'https://leather.mempool.space/api';\nexport const BITCOIN_API_BASE_URL_TESTNET3 = 'https://leather.mempool.space/testnet/api';\nexport const BITCOIN_API_BASE_URL_TESTNET4 = 'https://leather.mempool.space/testnet4/api';\nexport const BITCOIN_API_BASE_URL_SIGNET = 'https://mempool.space/signet/api';\n\nexport const BESTINSLOT_API_BASE_URL_MAINNET = 'https://leatherapi.bestinslot.xyz/v3';\nexport const BESTINSLOT_API_BASE_URL_TESTNET = 'https://leatherapi_testnet.bestinslot.xyz/v3';\n\nexport const STX20_API_BASE_URL_MAINNET = 'https://api.stx20.com/api/v1';\n\nexport const BNS_V2_API_BASE_URL = 'https://api.bnsv2.com';\n\n// Copied from @stacks/transactions to avoid dependencies\nexport enum ChainId {\n  Testnet = 2147483648,\n  Mainnet = 1,\n}\n\nexport enum WalletDefaultNetworkConfigurationIds {\n  mainnet = 'mainnet',\n  testnet = 'testnet',\n  testnet4 = 'testnet4',\n  signet = 'signet',\n  sbtcTestnet = 'sbtcTestnet',\n  sbtcDevenv = 'sbtcDevenv',\n  devnet = 'devnet',\n}\n\nexport type DefaultNetworkConfigurations = keyof typeof WalletDefaultNetworkConfigurationIds;\n\nexport const supportedBlockchains = ['stacks', 'bitcoin'] as const;\n\nexport type SupportedBlockchains = (typeof supportedBlockchains)[number];\n\nexport const networkModes = ['mainnet', 'testnet'] as const;\nexport const testnetModes = ['testnet', 'regtest', 'signet'] as const;\n\nexport const bitcoinNetworks = ['mainnet', 'testnet3', 'testnet4', 'regtest', 'signet'] as const;\nexport type BitcoinNetwork = (typeof bitcoinNetworks)[number];\n\nexport type NetworkModes = (typeof networkModes)[number];\ntype BitcoinTestnetModes = (typeof testnetModes)[number];\n\nexport function bitcoinNetworkToNetworkMode(network: BitcoinNetwork): BitcoinNetworkModes {\n  switch (network) {\n    case 'mainnet':\n      return 'mainnet';\n    case 'testnet3':\n      return 'testnet';\n    case 'testnet4':\n      return 'testnet';\n    case 'regtest':\n      return 'regtest';\n    case 'signet':\n      return 'signet';\n    default:\n      // TODO: Needs exhaustive check. Cannot import 'assertUnreachable' since 'utils' package depends on 'models'.\n      //       Ideally this function should live in utils, but it's currently widely used in the extension.\n      throw new Error(`Unhandled case: ${network}`);\n  }\n}\n\nexport type BitcoinNetworkModes = NetworkModes | BitcoinTestnetModes;\n\ninterface BaseChainConfig {\n  blockchain: Blockchain;\n}\n\nexport interface BitcoinChainConfig extends BaseChainConfig {\n  blockchain: 'bitcoin';\n  bitcoinUrl: string;\n  bitcoinNetwork: BitcoinNetwork;\n  mode: BitcoinNetworkModes;\n}\n\nexport interface StacksChainConfig extends BaseChainConfig {\n  blockchain: 'stacks';\n  url: string;\n  /** The chainId of the network (or parent network if this is a subnet) */\n  chainId: ChainId;\n  /** An additional chainId for subnets. Indicated a subnet if defined and is mainly used for signing. */\n  subnetChainId?: ChainId;\n}\n\nexport type NetworkConfiguration = z.infer<typeof networkConfigurationSchema>;\n\nconst networkMainnet: NetworkConfiguration = {\n  id: WalletDefaultNetworkConfigurationIds.mainnet,\n  name: 'Mainnet',\n  chain: {\n    stacks: {\n      blockchain: 'stacks',\n      chainId: ChainId.Mainnet,\n      url: HIRO_API_BASE_URL_MAINNET,\n    },\n    bitcoin: {\n      blockchain: 'bitcoin',\n      bitcoinNetwork: 'mainnet',\n      mode: 'mainnet',\n      bitcoinUrl: BITCOIN_API_BASE_URL_MAINNET,\n    },\n  },\n};\n\nconst networkTestnet: NetworkConfiguration = {\n  id: WalletDefaultNetworkConfigurationIds.testnet,\n  name: 'Testnet3',\n  chain: {\n    stacks: {\n      blockchain: 'stacks',\n      chainId: ChainId.Testnet,\n      url: HIRO_API_BASE_URL_TESTNET,\n    },\n    bitcoin: {\n      blockchain: 'bitcoin',\n      bitcoinNetwork: 'testnet3',\n      mode: 'testnet',\n      bitcoinUrl: BITCOIN_API_BASE_URL_TESTNET3,\n    },\n  },\n};\n\nconst networkTestnet4: NetworkConfiguration = {\n  id: WalletDefaultNetworkConfigurationIds.testnet4,\n  name: 'Testnet4',\n  chain: {\n    stacks: {\n      blockchain: 'stacks',\n      chainId: ChainId.Testnet,\n      url: HIRO_API_BASE_URL_TESTNET,\n    },\n    bitcoin: {\n      blockchain: 'bitcoin',\n      bitcoinNetwork: 'testnet4',\n      mode: 'testnet',\n      bitcoinUrl: BITCOIN_API_BASE_URL_TESTNET4,\n    },\n  },\n};\n\nconst networkSignet: NetworkConfiguration = {\n  id: WalletDefaultNetworkConfigurationIds.signet,\n  name: 'Signet',\n  chain: {\n    stacks: {\n      blockchain: 'stacks',\n      chainId: ChainId.Testnet,\n      url: HIRO_API_BASE_URL_TESTNET,\n    },\n    bitcoin: {\n      blockchain: 'bitcoin',\n      bitcoinNetwork: 'signet',\n      mode: 'signet',\n      bitcoinUrl: BITCOIN_API_BASE_URL_SIGNET,\n    },\n  },\n};\n\nconst networkSbtcTestnet: NetworkConfiguration = {\n  id: WalletDefaultNetworkConfigurationIds.sbtcTestnet,\n  name: 'sBTC Testnet',\n  chain: {\n    stacks: {\n      blockchain: 'stacks',\n      chainId: ChainId.Testnet,\n      url: HIRO_API_BASE_URL_TESTNET,\n    },\n    bitcoin: {\n      blockchain: 'bitcoin',\n      bitcoinNetwork: 'regtest',\n      mode: 'regtest',\n      bitcoinUrl: 'https://beta.sbtc-mempool.tech/api/proxy',\n    },\n  },\n};\n\nconst networkSbtcDevenv: NetworkConfiguration = {\n  id: WalletDefaultNetworkConfigurationIds.sbtcDevenv,\n  name: 'sBTC Devenv',\n  chain: {\n    stacks: {\n      blockchain: 'stacks',\n      chainId: ChainId.Testnet,\n      url: 'http://localhost:3999',\n    },\n    bitcoin: {\n      blockchain: 'bitcoin',\n      bitcoinNetwork: 'regtest',\n      mode: 'regtest',\n      bitcoinUrl: 'http://localhost:3000/api/proxy',\n    },\n  },\n};\n\nconst networkDevnet: NetworkConfiguration = {\n  id: WalletDefaultNetworkConfigurationIds.devnet,\n  name: 'Devnet',\n  chain: {\n    stacks: {\n      blockchain: 'stacks',\n      chainId: ChainId.Testnet,\n      url: 'http://localhost:3999',\n    },\n    bitcoin: {\n      blockchain: 'bitcoin',\n      bitcoinNetwork: 'regtest',\n      mode: 'regtest',\n      bitcoinUrl: 'http://localhost:18443',\n    },\n  },\n};\n\nexport const defaultCurrentNetwork: NetworkConfiguration = networkMainnet;\n\nexport const defaultNetworksKeyedById: Record<\n  WalletDefaultNetworkConfigurationIds,\n  NetworkConfiguration\n> = {\n  [WalletDefaultNetworkConfigurationIds.mainnet]: networkMainnet,\n  [WalletDefaultNetworkConfigurationIds.testnet4]: networkTestnet4,\n  [WalletDefaultNetworkConfigurationIds.testnet]: networkTestnet,\n  [WalletDefaultNetworkConfigurationIds.signet]: networkSignet,\n  [WalletDefaultNetworkConfigurationIds.sbtcTestnet]: networkSbtcTestnet,\n  [WalletDefaultNetworkConfigurationIds.sbtcDevenv]: networkSbtcDevenv,\n  [WalletDefaultNetworkConfigurationIds.devnet]: networkDevnet,\n};\n","import { HIRO_INSCRIPTIONS_API_URL } from '../../network/network.model';\nimport {\n  CryptoAssetCategories,\n  CryptoAssetChains,\n  CryptoAssetProtocols,\n  InscriptionCryptoAssetInfo,\n} from '../crypto-asset-info.model';\n\n/**\n * Inscriptions contain arbitrary data. When retrieving an inscription, it should be\n * classified into one of the types below, indicating that the app can handle it\n * appropriately and securely. Inscriptions of types not ready to be handled by the\n * app should be classified as \"other\".\n */\nexport const inscriptionMimeTypes = [\n  'audio',\n  'gltf',\n  'html',\n  'image',\n  'svg',\n  'text',\n  'video',\n  'other',\n] as const;\n\nexport type InscriptionMimeType = (typeof inscriptionMimeTypes)[number];\n\nexport function whenInscriptionMimeType<T>(\n  mimeType: string,\n  branches: { [k in InscriptionMimeType]?: () => T }\n) {\n  if (mimeType.startsWith('audio/') && branches.audio) {\n    return branches.audio();\n  }\n\n  if (mimeType.startsWith('text/html') && branches.html) {\n    return branches.html();\n  }\n\n  if (mimeType.startsWith('image/svg') && branches.svg) {\n    return branches.svg();\n  }\n\n  if (mimeType.startsWith('image/') && branches.image) {\n    return branches.image();\n  }\n\n  if (mimeType.startsWith('text') && branches.text) {\n    return branches.text();\n  }\n\n  if (mimeType.startsWith('video/') && branches.video) {\n    return branches.video();\n  }\n\n  if (mimeType.startsWith('model/gltf') && branches.gltf) {\n    return branches.gltf();\n  }\n\n  if (branches.other) return branches.other();\n\n  throw new Error('Unhandled inscription type');\n}\nexport interface Inscription extends InscriptionCryptoAssetInfo {\n  preview: string;\n  src: string;\n  title: string;\n  output: string;\n  txid: string;\n  offset: string;\n  address: string;\n  genesisBlockHash: string;\n  genesisTimestamp: number;\n  genesisBlockHeight: number;\n  value: string;\n}\n\ninterface RawInscription {\n  id: string;\n  number: number;\n  output: string;\n  contentType: string;\n  txid: string;\n  offset: string;\n  address: string;\n  genesisBlockHash: string;\n  genesisTimestamp: number;\n  genesisBlockHeight: number;\n  value: string;\n}\n\nexport function createInscription(inscription: RawInscription): Inscription {\n  const contentSrc = `${HIRO_INSCRIPTIONS_API_URL}/${inscription.id}/content`;\n  const iframeSrc = `https://ordinals.com/preview/${inscription.id}`;\n  const preview = `https://ordinals.hiro.so/inscription/${inscription.id}`;\n  const title = `Inscription ${inscription.number}`;\n\n  const sharedInfo = {\n    chain: CryptoAssetChains.bitcoin,\n    category: CryptoAssetCategories.nft,\n    protocol: CryptoAssetProtocols.inscription,\n    id: inscription.id,\n    number: inscription.number,\n    output: inscription.output,\n    txid: inscription.txid,\n    offset: inscription.offset,\n    address: inscription.address,\n    genesisBlockHash: inscription.genesisBlockHash,\n    genesisTimestamp: inscription.genesisTimestamp,\n    genesisBlockHeight: inscription.genesisBlockHeight,\n    value: inscription.value,\n    preview,\n    title,\n  };\n\n  return whenInscriptionMimeType<Inscription>(inscription.contentType, {\n    audio: () => ({\n      ...sharedInfo,\n      mimeType: 'audio',\n      name: 'inscription',\n      src: iframeSrc,\n    }),\n    gltf: () => ({\n      ...sharedInfo,\n      mimeType: 'gltf',\n      name: 'inscription',\n      src: iframeSrc,\n    }),\n    html: () => ({\n      ...sharedInfo,\n      mimeType: 'html',\n      name: 'inscription',\n      src: iframeSrc,\n    }),\n    image: () => ({\n      ...sharedInfo,\n      mimeType: 'image',\n      name: 'inscription',\n      src: contentSrc,\n    }),\n    svg: () => ({\n      ...sharedInfo,\n      mimeType: 'svg',\n      name: 'inscription',\n      src: iframeSrc,\n    }),\n    text: () => ({\n      ...sharedInfo,\n      mimeType: 'text',\n      name: 'inscription',\n      src: contentSrc,\n    }),\n    video: () => ({\n      ...sharedInfo,\n      mimeType: 'video',\n      name: 'inscription',\n      src: iframeSrc,\n    }),\n    other: () => ({\n      ...sharedInfo,\n      mimeType: 'other',\n      name: 'inscription',\n      src: '',\n    }),\n  });\n}\n","import type BigNumber from 'bignumber.js';\n\nexport interface AverageBitcoinFeeRates {\n  fastestFee: BigNumber;\n  halfHourFee: BigNumber;\n  hourFee: BigNumber;\n}\n\nexport const btcTxTimeMap: Record<keyof AverageBitcoinFeeRates, string> = {\n  fastestFee: '~10 – 20min',\n  halfHourFee: '~30 min',\n  hourFee: '~1 hour+',\n};\n\nexport enum BtcFeeType {\n  High = 'High',\n  Standard = 'Standard',\n  Low = 'Low',\n}\n","import { Blockchain } from '../types';\nimport { StacksFeeEstimate } from './stacks-fees.model';\n\nexport enum FeeTypes {\n  Low,\n  Middle,\n  High,\n  Custom,\n  Unknown,\n}\n\nexport enum FeeCalculationTypes {\n  Api = 'api',\n  Default = 'default',\n  DefaultSimulated = 'default-simulated',\n  FeesCapped = 'fees-capped',\n  TokenTransferSpecific = 'token-transfer-specific',\n}\n\nexport interface Fees {\n  blockchain: Blockchain;\n  estimates: StacksFeeEstimate[];\n  calculation: FeeCalculationTypes;\n}\n","import type { CryptoCurrency, FiatCurrency } from './currencies.model';\nimport type { Money } from './money.model';\n\ninterface MarketPair {\n  readonly base: CryptoCurrency;\n  readonly quote: FiatCurrency;\n}\n\nexport function createMarketPair(base: CryptoCurrency, quote: FiatCurrency): MarketPair {\n  return Object.freeze({ base, quote });\n}\n\nexport function formatMarketPair({ base, quote }: MarketPair) {\n  return `${base}/${quote}`;\n}\n\nexport interface MarketData {\n  readonly pair: MarketPair;\n  readonly price: Money;\n}\n\nexport function createMarketData(pair: MarketPair, price: Money): MarketData {\n  if (pair.quote !== price.symbol)\n    throw new Error('Cannot create market data when price does not match quote');\n  return Object.freeze({ pair, price });\n}\n","import { z } from 'zod';\n\nimport { bitcoinNetworks, networkModes, testnetModes } from './network.model';\n\nexport const bitcoinNetworkModesSchema = z.enum([...networkModes, ...testnetModes]);\n\nexport const bitcoinNetworkSchema = z.enum([...bitcoinNetworks]);\n\nexport const networkConfigurationSchema = z.object({\n  name: z.string(),\n  id: z.string(),\n  chain: z.object({\n    bitcoin: z.object({\n      blockchain: z.literal('bitcoin'),\n      bitcoinUrl: z.string(),\n      bitcoinNetwork: bitcoinNetworkSchema,\n      mode: bitcoinNetworkModesSchema,\n    }),\n    stacks: z.object({\n      blockchain: z.literal('stacks'),\n      url: z.string(),\n      chainId: z.number(),\n      subnetChainId: z.number().optional(),\n    }),\n  }),\n});\n","import { z } from 'zod';\n\nimport { Blockchain } from './types';\n\nexport type AccountDisplayPreference = 'native-segwit' | 'taproot' | 'bns' | 'stacks';\nexport interface AccountDisplayPreferenceInfo {\n  type: AccountDisplayPreference;\n  blockchain: Blockchain;\n  name: string;\n}\n\nexport type AnalyticsPreference = 'consent-given' | 'rejects-tracking';\n\nexport const emailAddressSchema = z.string().email({ message: 'Invalid email address' });\nexport type EmailAddress = z.infer<typeof emailAddressSchema>;\n","export const ActivityLevels = {\n  account: 'account',\n  app: 'app',\n} as const;\nexport type ActivityLevel = keyof typeof ActivityLevels;\n","export const OnChainActivityStatuses = {\n  pending: 'pending',\n  success: 'success',\n  failed: 'failed',\n} as const;\nexport type OnChainActivityStatus = keyof typeof OnChainActivityStatuses;\n","export const OnChainActivityTypes = {\n  deploySmartContract: 'deploySmartContract',\n  executeSmartContract: 'executeSmartContract',\n  lockAsset: 'lockAsset',\n  sendAsset: 'sendAsset',\n  receiveAsset: 'receiveAsset',\n  swapAssets: 'swapAssets',\n} as const;\nexport type OnChainActivityType = keyof typeof OnChainActivityTypes;\n\nexport const WalletActivityTypes = {\n  connectApp: 'connectApp',\n  signMessage: 'signMessage',\n} as const;\nexport type WalletActivityType = keyof typeof WalletActivityTypes;\n\nexport const GeneralActivityTypes = {\n  walletAdded: 'walletAdded',\n  receiveAnnouncement: 'receiveAnnouncement',\n  featureWaitlistNotification: 'featureWaitlistNotification',\n} as const;\nexport type GeneralActivityType = keyof typeof GeneralActivityTypes;\n\nexport type ActivityType = OnChainActivityType | WalletActivityType | GeneralActivityType;\n","import { z } from 'zod';\n\nexport const walletIdSchema = z.object({\n  fingerprint: z.string(),\n});\n\nexport const accountIdSchema = walletIdSchema.merge(z.object({ accountIndex: z.number() }));\n\nexport const bitcoinAddressInfoSchema = z.object({\n  taprootDescriptor: z.string(),\n  nativeSegwitDescriptor: z.string(),\n});\n\nexport const stacksAddressInfoSchema = z.object({\n  stxAddress: z.string(),\n});\n\nexport const accountAddressesSchema = z.object({\n  id: accountIdSchema,\n  bitcoin: bitcoinAddressInfoSchema.optional(),\n  stacks: stacksAddressInfoSchema.optional(),\n});\n\nexport type WalletId = z.infer<typeof walletIdSchema>;\nexport type AccountId = z.infer<typeof accountIdSchema>;\nexport type BitcoinAddressInfo = z.infer<typeof bitcoinAddressInfoSchema>;\nexport type StacksAddressInfo = z.infer<typeof stacksAddressInfoSchema>;\nexport type AccountAddresses = z.infer<typeof accountAddressesSchema>;\n"],"mappings":"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","names":["ChainId","WalletDefaultNetworkConfigurationIds","BtcFeeType","FeeTypes","FeeCalculationTypes","z","z"]}